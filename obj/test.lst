                              1 ;;;-----------------------------------------
                              2 ;;; Start MC6811 gcc assembly output
                              3 ;;; gcc compiler compiled on TBD
                              4 ;;; OPTIONS:	-mlong_branch optimize  
                              5 ;;; OPTIONS:	 peephole !omit_frame_pointer !signed-char
                              6 ;;; Source:		app\test.c
                              7 ;;; Destination:	test.s
                              8 ;;; Compiled:	Tue Oct 24 21:55:33 2000
                              9 ;;; (META)compiled by GNU C version 2.8.1.
                             10 ;;;-----------------------------------------
                             11 	.module test.c
                             12 	; extern	_presto_sleep
                             13 	; extern	_presto_get_message
                             14 	; extern	_lcd_raw_char
                             15 	; extern	_lcd_print
                             16 	.area	_CODE
                             17 	.globl	_LcdTask
   0000                      18 _LcdTask:
                             19 ;;;-----------------------------------------
                             20 ;;;  PROLOGUE for LcdTask
                             21 ;;;-----------------------------------------
   0000 3C                   22 	pshx	; allocate 2 byte auto variable
   0001 3C                   23 	pshx	; allocate 2 byte auto variable
   0002 3C                   24 	pshx	; allocate 2 byte auto variable
   0003 18 3C                25 	pshy	; Save stack frame
   0005 18 30                26 	tsy	; Set current stack frame
   0007 DE 00                27 	ldx	*ZD5
   0009 3C                   28 	pshx	; pushed register *ZD5
   000A DE 00                29 	ldx	*ZD6
   000C 3C                   30 	pshx	; pushed register *ZD6
                             31 ;;;END PROLOGUE
   000D C6 20                32 	ldab	#32
   000F D7 01                33 	stab	*ZD6+1	; movqi: #32 -> *ZD6
   0011 CC FF 00             34 	ldd	#-256
   0014 DD 00                35 	std	*ZXT
   0016 18 EC 06             36 	ldd	6,y
   0019 94 00                37 	anda	*ZXT
   001B D4 01                38 	andb	*ZXT+1
   001D 18 ED 06             39 	std	6,y	; andhi3: 6,y by #-256 -> 6,y
   0020                      40 L4:
   0020 BD 00 00             41 	jsr	_presto_sleep	; CALL: (VOIDmode) _presto_sleep (0 bytes)
   0023 18 DF 00             42 	sty	*ZXT
   0026 DC 00                43 	ldd	*ZXT
   0028 C3 00 02             44 	addd	#2
   002B DD 00                45 	std	*ZD0	; addhi3: y by #2 -> *ZD0
   002D BD 00 00             46 	jsr	_presto_get_message	; CALL: R:*ZD0 = _presto_get_message (0 bytes)
   0030 D6 01                47 	ldab	*ZD0+1	; tstqi: R:*ZD0
   0032 26 03                48 	bne	.+5
   0034 7E 00 20             49 	jmp	L4	; (beq) long branch
   0037 18 E6 02             50 	ldab	2,y
   003A 4F                   51 	clra
   003B DD 00                52 	std	*ZD5	; zero_extendqihi2: 2,y -> *ZD5
   003D DC 00                53 	ldd	*ZD5
   003F 1A 83 00 01          54 	cpd	#1	; cmphi *ZD5 with #1
   0043 26 03                55 	bne	.+5
   0045 7E 00 56             56 	jmp	L7	; (beq) long branch
   0048 DC 00                57 	ldd	*ZD5
   004A 1A 83 00 02          58 	cpd	#2	; cmphi *ZD5 with #2
   004E 26 03                59 	bne	.+5
   0050 7E 00 77             60 	jmp	L9	; (beq) long branch
   0053 7E 00 20             61 	jmp	L4
   0056                      62 L7:
   0056 7C 00 01             63 	inc	*ZD6+1	; addqi3: *ZD6 by #1 -> *ZD6
   0059 D6 01                64 	ldab	*ZD6+1
   005B C1 26                65 	cmpb	#38	; cmpqi *ZD6 with #38
   005D 22 03                66 	bhi	.+5
   005F 7E 00 66             67 	jmp	L8	; (bleu) long branch
   0062 C6 21                68 	ldab	#33
   0064 D7 01                69 	stab	*ZD6+1	; movqi: #33 -> *ZD6
   0066                      70 L8:
   0066 D6 01                71 	ldab	*ZD6+1
   0068 37                   72 	pshb		; movqi: *ZD6 -> ,-sp
   0069 C6 0B                73 	ldab	#11
   006B 37                   74 	pshb		; movqi: #11 -> ,-sp
   006C C6 00                75 	ldab	#0
   006E D7 01                76 	stab	*ZD0+1	; movqi: #0 -> *ZD0
   0070 BD 00 00             77 	jsr	_lcd_raw_char	; CALL: (VOIDmode) _lcd_raw_char (2 bytes)
   0073 38                   78 	pulx		; addhi3: sp by #2 -> sp
   0074 7E 00 20             79 	jmp	L4
   0077                      80 L9:
   0077 18 E6 03             81 	ldab	3,y
   007A 18 E7 06             82 	stab	6,y	; movqi: 3,y -> 6,y
   007D 18 DF 00             83 	sty	*ZXT
   0080 DC 00                84 	ldd	*ZXT
   0082 C3 00 06             85 	addd	#6
   0085 DD 00                86 	std	*ZD0	; addhi3: y by #6 -> *ZD0
   0087 BD 00 00             87 	jsr	_lcd_print	; CALL: (VOIDmode) _lcd_print (0 bytes)
   008A 7E 00 20             88 	jmp	L4
                             89 ;;;EPILOGUE
   008D 38                   90 	pulx	; Pulling register *ZD6
   008E DF 00                91 	stx	*ZD6
   0090 38                   92 	pulx	; Pulling register *ZD5
   0091 DF 00                93 	stx	*ZD5
   0093 18 38                94 	puly	; Restore stack frame
   0095 38                   95 	pulx	; deallocate 2 byte auto variable
   0096 38                   96 	pulx	; deallocate 2 byte auto variable
   0097 38                   97 	pulx	; deallocate 2 byte auto variable
   0098 39                   98 	rts	; return from function
                             99 ;;;-----------------------------------------
                            100 ;;; END EPILOGUE for LcdTask
                            101 ;;;-----------------------------------------
                            102 	; extern	_motor_set_speed
                            103 	; extern	_presto_timer
                            104 	; extern	_presto_send_message
                            105 	.globl	_Zero
   0099                     106 _Zero:
                            107 ;;;-----------------------------------------
                            108 ;;;  PROLOGUE for Zero
                            109 ;;;-----------------------------------------
   0099 3C                  110 	pshx	; allocate 2 byte auto variable
   009A 3C                  111 	pshx	; allocate 2 byte auto variable
   009B 18 3C               112 	pshy	; Save stack frame
   009D 18 30               113 	tsy	; Set current stack frame
   009F DE 00               114 	ldx	*ZD5
   00A1 3C                  115 	pshx	; pushed register *ZD5
                            116 ;;;END PROLOGUE
   00A2 C6 06               117 	ldab	#6
   00A4 D7 01               118 	stab	*ZD5+1	; movqi: #6 -> *ZD5
   00A6 CC 00 00            119 	ldd	#0
   00A9 18 ED 02            120 	std	2,y	; movhi: #0 -> 2,y
   00AC                     121 L16:
   00AC D6 01               122 	ldab	*ZD5+1
   00AE 37                  123 	pshb		; movqi: *ZD5 -> ,-sp
   00AF C6 00               124 	ldab	#0
   00B1 D7 01               125 	stab	*ZD0+1	; movqi: #0 -> *ZD0
   00B3 BD 00 00            126 	jsr	_motor_set_speed	; CALL: (VOIDmode) _motor_set_speed (1 bytes)
   00B6 CD EE 04            127 	ldx	4,y
   00B9 3C                  128 	pshx		; movhi: 4,y -> ,--sp
   00BA CD EE 02            129 	ldx	2,y
   00BD 3C                  130 	pshx		; movhi: 2,y -> ,--sp
   00BE CE 01 F4            131 	ldx	#500
   00C1 3C                  132 	pshx		; movhi: #500 -> ,--sp
   00C2 F6 05 04            133 	ldab	_zero_tid
   00C5 D7 01               134 	stab	*ZD0+1	; movqi: _zero_tid -> *ZD0
   00C7 BD 00 00            135 	jsr	_presto_timer	; CALL: R:*ZD0 = _presto_timer (6 bytes)
   00CA BD 00 00            136 	jsr	_presto_sleep	; CALL: (VOIDmode) _presto_sleep (0 bytes)
   00CD 18 DF 00            137 	sty	*ZXT
   00D0 DC 00               138 	ldd	*ZXT
   00D2 C3 00 02            139 	addd	#2
   00D5 DD 00               140 	std	*ZD0	; addhi3: y by #2 -> *ZD0
   00D7 BD 00 00            141 	jsr	_presto_get_message	; CALL: R:*ZD0 = _presto_get_message (0 bytes)
   00DA D6 01               142 	ldab	*ZD5+1
   00DC 50                  143 	negb
   00DD D7 01               144 	stab	*ZD5+1	; negqi2: *ZD5 -> *ZD5
   00DF C6 01               145 	ldab	#1
   00E1 18 E7 02            146 	stab	2,y	; movqi: #1 -> 2,y
   00E4 CD EE 04            147 	ldx	4,y
   00E7 3C                  148 	pshx		; movhi: 4,y -> ,--sp
   00E8 CD EE 02            149 	ldx	2,y
   00EB 3C                  150 	pshx		; movhi: 2,y -> ,--sp
   00EC F6 05 00            151 	ldab	_lcd_task_tid
   00EF D7 01               152 	stab	*ZD0+1	; movqi: _lcd_task_tid -> *ZD0
   00F1 BD 00 00            153 	jsr	_presto_send_message	; CALL: R:*ZD0 = _presto_send_message (4 bytes)
   00F4 30                  154 	tsx
   00F5 8F                  155 	xgdx
   00F6 C3 00 0B            156 	addd	#11
   00F9 8F                  157 	xgdx
   00FA 35                  158 	txs		; addhi3: sp by #11 -> sp
   00FB 7E 00 AC            159 	jmp	L16
                            160 ;;;EPILOGUE
   00FE 38                  161 	pulx	; Pulling register *ZD5
   00FF DF 00               162 	stx	*ZD5
   0101 18 38               163 	puly	; Restore stack frame
   0103 38                  164 	pulx	; deallocate 2 byte auto variable
   0104 38                  165 	pulx	; deallocate 2 byte auto variable
   0105 39                  166 	rts	; return from function
                            167 ;;;-----------------------------------------
                            168 ;;; END EPILOGUE for Zero
                            169 ;;;-----------------------------------------
                            170 	.globl	_One
   0106                     171 _One:
                            172 ;;;-----------------------------------------
                            173 ;;;  PROLOGUE for One
                            174 ;;;-----------------------------------------
   0106 3C                  175 	pshx	; allocate 2 byte auto variable
   0107 3C                  176 	pshx	; allocate 2 byte auto variable
   0108 18 3C               177 	pshy	; Save stack frame
   010A 18 30               178 	tsy	; Set current stack frame
   010C DE 00               179 	ldx	*ZD5
   010E 3C                  180 	pshx	; pushed register *ZD5
                            181 ;;;END PROLOGUE
   010F C6 06               182 	ldab	#6
   0111 D7 01               183 	stab	*ZD5+1	; movqi: #6 -> *ZD5
   0113 CC 00 00            184 	ldd	#0
   0116 18 ED 02            185 	std	2,y	; movhi: #0 -> 2,y
   0119                     186 L21:
   0119 D6 01               187 	ldab	*ZD5+1
   011B 37                  188 	pshb		; movqi: *ZD5 -> ,-sp
   011C C6 01               189 	ldab	#1
   011E D7 01               190 	stab	*ZD0+1	; movqi: #1 -> *ZD0
   0120 BD 00 00            191 	jsr	_motor_set_speed	; CALL: (VOIDmode) _motor_set_speed (1 bytes)
   0123 CD EE 04            192 	ldx	4,y
   0126 3C                  193 	pshx		; movhi: 4,y -> ,--sp
   0127 CD EE 02            194 	ldx	2,y
   012A 3C                  195 	pshx		; movhi: 2,y -> ,--sp
   012B CE 02 58            196 	ldx	#600
   012E 3C                  197 	pshx		; movhi: #600 -> ,--sp
   012F F6 05 01            198 	ldab	_one_tid
   0132 D7 01               199 	stab	*ZD0+1	; movqi: _one_tid -> *ZD0
   0134 BD 00 00            200 	jsr	_presto_timer	; CALL: R:*ZD0 = _presto_timer (6 bytes)
   0137 BD 00 00            201 	jsr	_presto_sleep	; CALL: (VOIDmode) _presto_sleep (0 bytes)
   013A 18 DF 00            202 	sty	*ZXT
   013D DC 00               203 	ldd	*ZXT
   013F C3 00 02            204 	addd	#2
   0142 DD 00               205 	std	*ZD0	; addhi3: y by #2 -> *ZD0
   0144 BD 00 00            206 	jsr	_presto_get_message	; CALL: R:*ZD0 = _presto_get_message (0 bytes)
   0147 D6 01               207 	ldab	*ZD5+1
   0149 50                  208 	negb
   014A D7 01               209 	stab	*ZD5+1	; negqi2: *ZD5 -> *ZD5
   014C 38                  210 	pulx
   014D 38                  211 	pulx
   014E 38                  212 	pulx
   014F 33                  213 	pulb		; addhi3: sp by #7 -> sp
   0150 7E 01 19            214 	jmp	L21
                            215 ;;;EPILOGUE
   0153 38                  216 	pulx	; Pulling register *ZD5
   0154 DF 00               217 	stx	*ZD5
   0156 18 38               218 	puly	; Restore stack frame
   0158 38                  219 	pulx	; deallocate 2 byte auto variable
   0159 38                  220 	pulx	; deallocate 2 byte auto variable
   015A 39                  221 	rts	; return from function
                            222 ;;;-----------------------------------------
                            223 ;;; END EPILOGUE for One
                            224 ;;;-----------------------------------------
                            225 	.globl	_Two
   015B                     226 _Two:
                            227 ;;;-----------------------------------------
                            228 ;;;  PROLOGUE for Two
                            229 ;;;-----------------------------------------
   015B 3C                  230 	pshx	; allocate 2 byte auto variable
   015C 3C                  231 	pshx	; allocate 2 byte auto variable
   015D 18 3C               232 	pshy	; Save stack frame
   015F 18 30               233 	tsy	; Set current stack frame
   0161 DE 00               234 	ldx	*ZD5
   0163 3C                  235 	pshx	; pushed register *ZD5
                            236 ;;;END PROLOGUE
   0164 C6 06               237 	ldab	#6
   0166 D7 01               238 	stab	*ZD5+1	; movqi: #6 -> *ZD5
   0168 CC 00 00            239 	ldd	#0
   016B 18 ED 02            240 	std	2,y	; movhi: #0 -> 2,y
   016E                     241 L26:
   016E D6 01               242 	ldab	*ZD5+1
   0170 37                  243 	pshb		; movqi: *ZD5 -> ,-sp
   0171 C6 02               244 	ldab	#2
   0173 D7 01               245 	stab	*ZD0+1	; movqi: #2 -> *ZD0
   0175 BD 00 00            246 	jsr	_motor_set_speed	; CALL: (VOIDmode) _motor_set_speed (1 bytes)
   0178 CD EE 04            247 	ldx	4,y
   017B 3C                  248 	pshx		; movhi: 4,y -> ,--sp
   017C CD EE 02            249 	ldx	2,y
   017F 3C                  250 	pshx		; movhi: 2,y -> ,--sp
   0180 CE 02 BC            251 	ldx	#700
   0183 3C                  252 	pshx		; movhi: #700 -> ,--sp
   0184 F6 05 02            253 	ldab	_two_tid
   0187 D7 01               254 	stab	*ZD0+1	; movqi: _two_tid -> *ZD0
   0189 BD 00 00            255 	jsr	_presto_timer	; CALL: R:*ZD0 = _presto_timer (6 bytes)
   018C BD 00 00            256 	jsr	_presto_sleep	; CALL: (VOIDmode) _presto_sleep (0 bytes)
   018F 18 DF 00            257 	sty	*ZXT
   0192 DC 00               258 	ldd	*ZXT
   0194 C3 00 02            259 	addd	#2
   0197 DD 00               260 	std	*ZD0	; addhi3: y by #2 -> *ZD0
   0199 BD 00 00            261 	jsr	_presto_get_message	; CALL: R:*ZD0 = _presto_get_message (0 bytes)
   019C D6 01               262 	ldab	*ZD5+1
   019E 50                  263 	negb
   019F D7 01               264 	stab	*ZD5+1	; negqi2: *ZD5 -> *ZD5
   01A1 38                  265 	pulx
   01A2 38                  266 	pulx
   01A3 38                  267 	pulx
   01A4 33                  268 	pulb		; addhi3: sp by #7 -> sp
   01A5 7E 01 6E            269 	jmp	L26
                            270 ;;;EPILOGUE
   01A8 38                  271 	pulx	; Pulling register *ZD5
   01A9 DF 00               272 	stx	*ZD5
   01AB 18 38               273 	puly	; Restore stack frame
   01AD 38                  274 	pulx	; deallocate 2 byte auto variable
   01AE 38                  275 	pulx	; deallocate 2 byte auto variable
   01AF 39                  276 	rts	; return from function
                            277 ;;;-----------------------------------------
                            278 ;;; END EPILOGUE for Two
                            279 ;;;-----------------------------------------
                            280 	.globl	_Three
   01B0                     281 _Three:
                            282 ;;;-----------------------------------------
                            283 ;;;  PROLOGUE for Three
                            284 ;;;-----------------------------------------
   01B0 3C                  285 	pshx	; allocate 2 byte auto variable
   01B1 3C                  286 	pshx	; allocate 2 byte auto variable
   01B2 3C                  287 	pshx	; allocate 2 byte auto variable
   01B3 3C                  288 	pshx	; allocate 2 byte auto variable
   01B4 18 3C               289 	pshy	; Save stack frame
   01B6 18 30               290 	tsy	; Set current stack frame
   01B8 DE 00               291 	ldx	*ZD5
   01BA 3C                  292 	pshx	; pushed register *ZD5
                            293 ;;;END PROLOGUE
   01BB C6 06               294 	ldab	#6
   01BD D7 01               295 	stab	*ZD5+1	; movqi: #6 -> *ZD5
   01BF CC 00 00            296 	ldd	#0
   01C2 18 ED 02            297 	std	2,y	; movhi: #0 -> 2,y
   01C5                     298 L31:
   01C5 D6 01               299 	ldab	*ZD5+1
   01C7 37                  300 	pshb		; movqi: *ZD5 -> ,-sp
   01C8 C6 03               301 	ldab	#3
   01CA D7 01               302 	stab	*ZD0+1	; movqi: #3 -> *ZD0
   01CC BD 00 00            303 	jsr	_motor_set_speed	; CALL: (VOIDmode) _motor_set_speed (1 bytes)
   01CF CD EE 04            304 	ldx	4,y
   01D2 3C                  305 	pshx		; movhi: 4,y -> ,--sp
   01D3 CD EE 02            306 	ldx	2,y
   01D6 3C                  307 	pshx		; movhi: 2,y -> ,--sp
   01D7 CE 00 D2            308 	ldx	#210
   01DA 3C                  309 	pshx		; movhi: #210 -> ,--sp
   01DB F6 05 03            310 	ldab	_three_tid
   01DE D7 01               311 	stab	*ZD0+1	; movqi: _three_tid -> *ZD0
   01E0 BD 00 00            312 	jsr	_presto_timer	; CALL: R:*ZD0 = _presto_timer (6 bytes)
   01E3 C6 01               313 	ldab	#1
   01E5 18 E7 02            314 	stab	2,y	; movqi: #1 -> 2,y
   01E8 CD EE 04            315 	ldx	4,y
   01EB 3C                  316 	pshx		; movhi: 4,y -> ,--sp
   01EC CD EE 02            317 	ldx	2,y
   01EF 3C                  318 	pshx		; movhi: 2,y -> ,--sp
   01F0 F6 05 00            319 	ldab	_lcd_task_tid
   01F3 D7 01               320 	stab	*ZD0+1	; movqi: _lcd_task_tid -> *ZD0
   01F5 BD 00 00            321 	jsr	_presto_send_message	; CALL: R:*ZD0 = _presto_send_message (4 bytes)
   01F8 BD 00 00            322 	jsr	_presto_sleep	; CALL: (VOIDmode) _presto_sleep (0 bytes)
   01FB 18 DF 00            323 	sty	*ZXT
   01FE DC 00               324 	ldd	*ZXT
   0200 C3 00 06            325 	addd	#6
   0203 DD 00               326 	std	*ZD0	; addhi3: y by #6 -> *ZD0
   0205 BD 00 00            327 	jsr	_presto_get_message	; CALL: R:*ZD0 = _presto_get_message (0 bytes)
   0208 D6 01               328 	ldab	*ZD5+1
   020A 50                  329 	negb
   020B D7 01               330 	stab	*ZD5+1	; negqi2: *ZD5 -> *ZD5
   020D 30                  331 	tsx
   020E 8F                  332 	xgdx
   020F C3 00 0B            333 	addd	#11
   0212 8F                  334 	xgdx
   0213 35                  335 	txs		; addhi3: sp by #11 -> sp
   0214 7E 01 C5            336 	jmp	L31
                            337 ;;;EPILOGUE
   0217 38                  338 	pulx	; Pulling register *ZD5
   0218 DF 00               339 	stx	*ZD5
   021A 18 38               340 	puly	; Restore stack frame
   021C 38                  341 	pulx	; deallocate 2 byte auto variable
   021D 38                  342 	pulx	; deallocate 2 byte auto variable
   021E 38                  343 	pulx	; deallocate 2 byte auto variable
   021F 38                  344 	pulx	; deallocate 2 byte auto variable
   0220 39                  345 	rts	; return from function
                            346 ;;;-----------------------------------------
                            347 ;;; END EPILOGUE for Three
                            348 ;;;-----------------------------------------
                            349 	; extern	_lcd_init
                            350 	.globl	_main
   0221                     351 _main:
                            352 ;;;-----------------------------------------
                            353 ;;;  PROLOGUE for main
                            354 ;;;-----------------------------------------
   0221 18 3C               355 	pshy	; Save stack frame
   0223 18 30               356 	tsy	; Set current stack frame
                            357 ;;;END PROLOGUE
   0225 BD 00 00            358 	jsr	___main	; CALL: (VOIDmode) ___main (0 bytes)
   0228                     359 L36:
   0228 BD 00 00            360 	jsr	_lcd_init	; CALL: (VOIDmode) _lcd_init (0 bytes)
   022B 7E 02 28            361 	jmp	L36
                            362 ;;;EPILOGUE
   022E 18 38               363 	puly	; Restore stack frame
   0230 39                  364 	rts	; return from function
                            365 ;;;-----------------------------------------
                            366 ;;; END EPILOGUE for main
                            367 ;;;-----------------------------------------
                            368 	.area	_BSS
   0000                     369 _lcd_task_stack:	.blkb	256
   0100                     370 _task_one_stack:	.blkb	256
   0200                     371 _task_two_stack:	.blkb	256
   0300                     372 _task_three_stack:	.blkb	256
   0400                     373 _task_zero_stack:	.blkb	256
   0500                     374 _lcd_task_tid:	.blkb	1
   0501                     375 _one_tid:	.blkb	1
   0502                     376 _two_tid:	.blkb	1
   0503                     377 _three_tid:	.blkb	1
   0504                     378 _zero_tid:	.blkb	1
                            379 	; END
