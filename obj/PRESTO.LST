                         .area data
 8000                  _one_tid::
 8000                    .blkb 1
                         .area idata
--- 0000 00                .byte 0
                         .area data
 8001                  _two_tid::
 8001                    .blkb 1
                         .area idata
--- 0001 00                .byte 0
                         .area data
 8002                  _three_tid::
 8002                    .blkb 1
                         .area idata
--- 0002 00                .byte 0
                         .area data
 8003                  _four_tid::
 8003                    .blkb 1
                         .area idata
--- 0003 00                .byte 0
                         .area data
 8004                  _light1::
 8004                    .blkb 1
                         .area idata
--- 0004 00                .byte 0
                         .area data
 8005                  _light2::
 8005                    .blkb 1
                         .area idata
--- 0005 00                .byte 0
                         .area data
 8006                  _light3::
 8006                    .blkb 1
                         .area idata
--- 0006 00                .byte 0
                         .area data
 8007                  _light4::
 8007                    .blkb 1
                         .area idata
--- 0007 00                .byte 0
                         .area text
                       ;  IX -> 0,x
                       ;  rMEM -> 2,x
                       ;         lights -> 5,x
 C040                  _assert_lights::
 C040  BDCE72            jsr __enterb
 C043  06                .byte 0x6
 C044                  test.40::	
                       ; 
                       ; #include "presto.h"
                       ; #include "types.h"
                       ; //#include "services.h"
                       ; //#include "priority.h"
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // system crashes after 21 seconds (42*500=21000,35*600=21000,30*700=21000)
                       ; #define TIMER1    5000
                       ; #define TIMER2    600
                       ; #define TIMER3    1000
                       ; #define TIMER4    1200
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #define STACK_SIZE 0x100
                       ; 
                       ; /*static*/ BYTE task_one_stack[STACK_SIZE];
                       ; /*static*/ BYTE task_two_stack[STACK_SIZE];
                       ; /*static*/ BYTE task_three_stack[STACK_SIZE];
                       ; /*static*/ BYTE task_four_stack[STACK_SIZE];
                       ; 
                       ; PRESTO_TID_T one_tid=0;
                       ; PRESTO_TID_T two_tid=0;
                       ; PRESTO_TID_T three_tid=0;
                       ; PRESTO_TID_T four_tid=0;
                       ; 
                       ; BYTE light1=0x00;
                       ; BYTE light2=0x00;
                       ; BYTE light3=0x00;
                       ; BYTE light4=0x00;
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #define MOTOR_PORT *(unsigned char *)(0x7FFF)
                       ; 
                       ; void assert_lights(void) {
                       ;    BYTE lights;
                       ;    lights=0xF0|light1|light2|light3|light4;
 C044  F68004            ldab _light1
 C047  4F                clra
 C048  8A00              oraa #0
 C04A  CAF0              orab #240
 C04C  37                pshb ; 
 C04D  36                psha ; spill
 C04E  F68005            ldab _light2
 C051  4F                clra
 C052  ED02              std 2,x
 C054  32                pula ; 
 C055  33                pulb ; reload
 C056  AA02              oraa 2,x
 C058  EA03              orab 3,x
 C05A  37                pshb ; 
 C05B  36                psha ; spill
 C05C  F68006            ldab _light3
 C05F  4F                clra
 C060  ED02              std 2,x
 C062  32                pula ; 
 C063  33                pulb ; reload
 C064  AA02              oraa 2,x
 C066  EA03              orab 3,x
 C068  37                pshb ; 
 C069  36                psha ; spill
 C06A  F68007            ldab _light4
 C06D  4F                clra
 C06E  ED02              std 2,x
 C070  32                pula ; 
 C071  33                pulb ; reload
 C072  AA02              oraa 2,x
 C074  EA03              orab 3,x
 C076  E705              stab 5,x
 C078                  test.41::	
                       ;    MOTOR_PORT=lights;
 C078  E605              ldab 5,x
 C07A  F77FFF            stab 0x7fff
 C07D                  test.42::	
                       ; }
 C07D                  L10:
 C07D  8F                xgdx
 C07E  C30006            addd #6
 C081  8F                xgdx
 C082  35                txs
 C083  38                pulx
 C084  39                rts
                       ;  lreg1 -> -4,x
                       ;  lreg2 -> -8,x
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;            msg -> 6,x
 C085                  _One::
 C085  BDCE72            jsr __enterb
 C088  8A                .byte 0x8a
 C089                  test.48::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void One(void) {
                       ;    PRESTO_MAIL_T msg;
                       ;    msg.dw.dw1=0;
 C089  18CEC29F          ldy #L12
 C08D  BDCF78            jsr __ly2reg
 C090  EC00              ldd 0,x
 C092  C30006            addd #6
 C095  188F              xgdy
 C097  BDCFB5            jsr __lreg2y
 C09A  2046              bra L14
 C09C                  L13:
 C09C                  test.50::	
                       ;    while(1) {
                       ;       light1=light1^0x01;
 C09C  F68004            ldab _light1
 C09F  4F                clra
 C0A0  8800              eora #0
 C0A2  C801              eorb #1
 C0A4  F78004            stab _light1
 C0A7                  test.51::	
                       ;       assert_lights();
 C0A7  BDC040            jsr _assert_lights
 C0AA                  test.52::	
                       ;       presto_timer(one_tid,TIMER1,msg);
 C0AA  EC00              ldd 0,x
 C0AC  C30006            addd #6
 C0AF  188F              xgdy
 C0B1  EC00              ldd 0,x
 C0B3  C30002            addd #2
 C0B6  3C                pshx
 C0B7  8F                xgdx
 C0B8  CC0004            ldd #4
 C0BB  BDCF1B            jsr __asgnblk
 C0BE  38                pulx
 C0BF  EC00              ldd 0,x
 C0C1  C30002            addd #2
 C0C4  37                pshb
 C0C5  36                psha
 C0C6  CC1388            ldd #5000
 C0C9  37                pshb
 C0CA  36                psha
 C0CB  F68000            ldab _one_tid
 C0CE  4F                clra
 C0CF  5D                tstb
 C0D0  2A01              bpl X0
 C0D2  43                coma
 C0D3                  X0:
 C0D3  BDC9CC            jsr _presto_timer
 C0D6  1838              puly
 C0D8  1838              puly
 C0DA                  test.53::	
                       ;       presto_wait_for_message(&msg);
 C0DA  EC00              ldd 0,x
 C0DC  C30006            addd #6
 C0DF  BDCB96            jsr _presto_wait_for_message
 C0E2                  test.54::	
                       ;    }
 C0E2                  L14:
 C0E2  20B8              bra L13
 C0E4                  L11:
 C0E4  8F                xgdx
 C0E5  C3000A            addd #10
 C0E8  8F                xgdx
 C0E9  35                txs
 C0EA  38                pulx
 C0EB  39                rts
                       ;  lreg1 -> -4,x
                       ;  lreg2 -> -8,x
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;            msg -> 6,x
 C0EC                  _Two::
 C0EC  BDCE72            jsr __enterb
 C0EF  8A                .byte 0x8a
 C0F0                  test.61::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void Two(void) {
                       ;    PRESTO_MAIL_T msg;
                       ;    msg.dw.dw1=0;
 C0F0  18CEC29F          ldy #L12
 C0F4  BDCF78            jsr __ly2reg
 C0F7  EC00              ldd 0,x
 C0F9  C30006            addd #6
 C0FC  188F              xgdy
 C0FE  BDCFB5            jsr __lreg2y
 C101  2046              bra L18
 C103                  L17:
 C103                  test.63::	
                       ;    while(1) {
                       ;       light2=light2^0x02;
 C103  F68005            ldab _light2
 C106  4F                clra
 C107  8800              eora #0
 C109  C802              eorb #2
 C10B  F78005            stab _light2
 C10E                  test.64::	
                       ;       assert_lights();
 C10E  BDC040            jsr _assert_lights
 C111                  test.65::	
                       ;       presto_timer(two_tid,TIMER2,msg);
 C111  EC00              ldd 0,x
 C113  C30006            addd #6
 C116  188F              xgdy
 C118  EC00              ldd 0,x
 C11A  C30002            addd #2
 C11D  3C                pshx
 C11E  8F                xgdx
 C11F  CC0004            ldd #4
 C122  BDCF1B            jsr __asgnblk
 C125  38                pulx
 C126  EC00              ldd 0,x
 C128  C30002            addd #2
 C12B  37                pshb
 C12C  36                psha
 C12D  CC0258            ldd #600
 C130  37                pshb
 C131  36                psha
 C132  F68001            ldab _two_tid
 C135  4F                clra
 C136  5D                tstb
 C137  2A01              bpl X1
 C139  43                coma
 C13A                  X1:
 C13A  BDC9CC            jsr _presto_timer
 C13D  1838              puly
 C13F  1838              puly
 C141                  test.66::	
                       ;       presto_wait_for_message(&msg);
 C141  EC00              ldd 0,x
 C143  C30006            addd #6
 C146  BDCB96            jsr _presto_wait_for_message
 C149                  test.67::	
                       ;    }
 C149                  L18:
 C149  20B8              bra L17
 C14B                  L16:
 C14B  8F                xgdx
 C14C  C3000A            addd #10
 C14F  8F                xgdx
 C150  35                txs
 C151  38                pulx
 C152  39                rts
                       ;  lreg1 -> -4,x
                       ;  lreg2 -> -8,x
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;            msg -> 6,x
 C153                  _Three::
 C153  BDCE72            jsr __enterb
 C156  8A                .byte 0x8a
 C157                  test.74::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void Three(void) {
                       ;    PRESTO_MAIL_T msg;
                       ;    msg.dw.dw1=0;
 C157  18CEC29F          ldy #L12
 C15B  BDCF78            jsr __ly2reg
 C15E  EC00              ldd 0,x
 C160  C30006            addd #6
 C163  188F              xgdy
 C165  BDCFB5            jsr __lreg2y
 C168  2046              bra L22
 C16A                  L21:
 C16A                  test.76::	
                       ;    while(1) {
                       ;       light3=light3^0x04;
 C16A  F68006            ldab _light3
 C16D  4F                clra
 C16E  8800              eora #0
 C170  C804              eorb #4
 C172  F78006            stab _light3
 C175                  test.77::	
                       ;       assert_lights();
 C175  BDC040            jsr _assert_lights
 C178                  test.78::	
                       ;       presto_timer(three_tid,TIMER3,msg);
 C178  EC00              ldd 0,x
 C17A  C30006            addd #6
 C17D  188F              xgdy
 C17F  EC00              ldd 0,x
 C181  C30002            addd #2
 C184  3C                pshx
 C185  8F                xgdx
 C186  CC0004            ldd #4
 C189  BDCF1B            jsr __asgnblk
 C18C  38                pulx
 C18D  EC00              ldd 0,x
 C18F  C30002            addd #2
 C192  37                pshb
 C193  36                psha
 C194  CC03E8            ldd #1000
 C197  37                pshb
 C198  36                psha
 C199  F68002            ldab _three_tid
 C19C  4F                clra
 C19D  5D                tstb
 C19E  2A01              bpl X2
 C1A0  43                coma
 C1A1                  X2:
 C1A1  BDC9CC            jsr _presto_timer
 C1A4  1838              puly
 C1A6  1838              puly
 C1A8                  test.79::	
                       ;       presto_wait_for_message(&msg);
 C1A8  EC00              ldd 0,x
 C1AA  C30006            addd #6
 C1AD  BDCB96            jsr _presto_wait_for_message
 C1B0                  test.80::	
                       ;    }
 C1B0                  L22:
 C1B0  20B8              bra L21
 C1B2                  L20:
 C1B2  8F                xgdx
 C1B3  C3000A            addd #10
 C1B6  8F                xgdx
 C1B7  35                txs
 C1B8  38                pulx
 C1B9  39                rts
                       ;  lreg1 -> -4,x
                       ;  lreg2 -> -8,x
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;            msg -> 6,x
 C1BA                  _Four::
 C1BA  BDCE72            jsr __enterb
 C1BD  8A                .byte 0x8a
 C1BE                  test.87::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void Four(void) {
                       ;    PRESTO_MAIL_T msg;
                       ;    msg.dw.dw1=0;
 C1BE  18CEC29F          ldy #L12
 C1C2  BDCF78            jsr __ly2reg
 C1C5  EC00              ldd 0,x
 C1C7  C30006            addd #6
 C1CA  188F              xgdy
 C1CC  BDCFB5            jsr __lreg2y
 C1CF  2046              bra L26
 C1D1                  L25:
 C1D1                  test.89::	
                       ;    while(1) {
                       ;       light4=light4^0x08;
 C1D1  F68007            ldab _light4
 C1D4  4F                clra
 C1D5  8800              eora #0
 C1D7  C808              eorb #8
 C1D9  F78007            stab _light4
 C1DC                  test.90::	
                       ;       assert_lights();
 C1DC  BDC040            jsr _assert_lights
 C1DF                  test.91::	
                       ;       presto_timer(four_tid,TIMER4,msg);
 C1DF  EC00              ldd 0,x
 C1E1  C30006            addd #6
 C1E4  188F              xgdy
 C1E6  EC00              ldd 0,x
 C1E8  C30002            addd #2
 C1EB  3C                pshx
 C1EC  8F                xgdx
 C1ED  CC0004            ldd #4
 C1F0  BDCF1B            jsr __asgnblk
 C1F3  38                pulx
 C1F4  EC00              ldd 0,x
 C1F6  C30002            addd #2
 C1F9  37                pshb
 C1FA  36                psha
 C1FB  CC04B0            ldd #1200
 C1FE  37                pshb
 C1FF  36                psha
 C200  F68003            ldab _four_tid
 C203  4F                clra
 C204  5D                tstb
 C205  2A01              bpl X3
 C207  43                coma
 C208                  X3:
 C208  BDC9CC            jsr _presto_timer
 C20B  1838              puly
 C20D  1838              puly
 C20F                  test.92::	
                       ;       presto_wait_for_message(&msg);
 C20F  EC00              ldd 0,x
 C211  C30006            addd #6
 C214  BDCB96            jsr _presto_wait_for_message
 C217                  test.93::	
                       ;    }
 C217                  L26:
 C217  20B8              bra L25
 C219                  L24:
 C219  8F                xgdx
 C21A  C3000A            addd #10
 C21D  8F                xgdx
 C21E  35                txs
 C21F  38                pulx
 C220  39                rts
                       ;  IX -> 0,x
 C221                  _main::
 C221                  test.100::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; int main(void) {
                       ; 
                       ;    presto_init();
 C221  BDC4FA            jsr _presto_init
 C224                  test.102::	
                       ; #if TIMER1 != 0
                       ;    one_tid=presto_create_task(One, task_one_stack, STACK_SIZE, 35);
 C224  CC0023            ldd #35
 C227  37                pshb
 C228  36                psha
 C229  CC0100            ldd #256
 C22C  37                pshb
 C22D  36                psha
 C22E  CC9B00            ldd #_task_one_stack
 C231  37                pshb
 C232  36                psha
 C233  CCC085            ldd #_One
 C236  BDC64E            jsr _presto_create_task
 C239  BDCEBB            jsr __movspb
 C23C  06                .byte 6
 C23D  F78000            stab _one_tid
 C240                  test.105::	
                       ; #endif
                       ; #if TIMER2 != 0
                       ;    two_tid=presto_create_task(Two, task_two_stack, STACK_SIZE, 40);
 C240  CC0028            ldd #40
 C243  37                pshb
 C244  36                psha
 C245  CC0100            ldd #256
 C248  37                pshb
 C249  36                psha
 C24A  CC9A00            ldd #_task_two_stack
 C24D  37                pshb
 C24E  36                psha
 C24F  CCC0EC            ldd #_Two
 C252  BDC64E            jsr _presto_create_task
 C255  BDCEBB            jsr __movspb
 C258  06                .byte 6
 C259  F78001            stab _two_tid
 C25C                  test.108::	
                       ; #endif
                       ; #if TIMER3 != 0
                       ;    three_tid=presto_create_task(Three, task_three_stack, STACK_SIZE, 45);
 C25C  CC002D            ldd #45
 C25F  37                pshb
 C260  36                psha
 C261  CC0100            ldd #256
 C264  37                pshb
 C265  36                psha
 C266  CC9900            ldd #_task_three_stack
 C269  37                pshb
 C26A  36                psha
 C26B  CCC153            ldd #_Three
 C26E  BDC64E            jsr _presto_create_task
 C271  BDCEBB            jsr __movspb
 C274  06                .byte 6
 C275  F78002            stab _three_tid
 C278                  test.111::	
                       ; #endif
                       ; #if TIMER4 != 0
                       ;    four_tid=presto_create_task(Four, task_four_stack, STACK_SIZE, 50);
 C278  CC0032            ldd #50
 C27B  37                pshb
 C27C  36                psha
 C27D  CC0100            ldd #256
 C280  37                pshb
 C281  36                psha
 C282  CC9800            ldd #_task_four_stack
 C285  37                pshb
 C286  36                psha
 C287  CCC1BA            ldd #_Four
 C28A  BDC64E            jsr _presto_create_task
 C28D  BDCEBB            jsr __movspb
 C290  06                .byte 6
 C291  F78003            stab _four_tid
 C294                  test.118::	
                       ; #endif
                       ; 
                       ;    //motor_init();
                       ;    //lcd_init();
                       ;    //serial_init(9600);
                       ;    //debugger_init();
                       ;    presto_start_scheduler();
 C294  BDC5F6            jsr _presto_start_scheduler
 C297                  test.120::	
                       ;    // we never get here
                       ;    presto_fatal_error();
 C297  BDC4B4            jsr _presto_fatal_error
 C29A                  test.121::	
                       ;    return 0;
 C29A  CC0000            ldd #0
 C29D  39                rts
 C29E                  L28:
 C29E  39                rts
                         .area bss
 9800                  _task_four_stack::
 9800                    .blkb 256
 9900                  _task_three_stack::
 9900                    .blkb 256
 9A00                  _task_two_stack::
 9A00                    .blkb 256
 9B00                  _task_one_stack::
 9B00                    .blkb 256
                         .area text
--- 025F                 L12:
--- 025F 00000000          .word 0,0
                         .area text
                       ;  IX -> 0,x
                       ;          clock -> 2,x
                       ;          ?temp -> 8,x
 C2A3                  _clock_reset::
 C2A3  BDCE72            jsr __enterb
 C2A6  46                .byte 0x46
 C2A7                  clock.9::	
                       ; 
                       ; #include "clock.h"
                       ; #include "types.h"
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; PRESTO_TIME_T clock_reset(void) {
                       ;    PRESTO_TIME_T clock;
                       ;    clock.l=0;
 C2A7  CC0000            ldd #0
 C2AA  ED04              std 4,x
 C2AC                  clock.10::	
                       ;    clock.h=0;
 C2AC  CC0000            ldd #0
 C2AF  ED02              std 2,x
 C2B1                  clock.11::	
                       ;    return clock;
 C2B1  EC00              ldd 0,x
 C2B3  C30002            addd #2
 C2B6  188F              xgdy
 C2B8  EC08              ldd 8,x
 C2BA  3C                pshx
 C2BB  8F                xgdx
 C2BC  CC0004            ldd #4
 C2BF  BDCF1B            jsr __asgnblk
 C2C2  38                pulx
 C2C3                  L5:
 C2C3  8F                xgdx
 C2C4  C30006            addd #6
 C2C7  8F                xgdx
 C2C8  35                txs
 C2C9  38                pulx
 C2CA  1838              puly
 C2CC  39                rts
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;           time -> 12,x
                       ;          clock -> 10,x
                       ;          ?temp -> 6,x
 C2CD                  _clock_add::
 C2CD  BDCE72            jsr __enterb
 C2D0  44                .byte 0x44
 C2D1                  clock.17::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; PRESTO_TIME_T clock_add(PRESTO_TIME_T clock, unsigned short time) {
                       ;    clock.l=clock.l+time;
 C2D1  EC0A              ldd 10,x
 C2D3  C30002            addd #2
 C2D6  ED02              std 2,x
 C2D8  1AEE02            ldy 2,x
 C2DB  18EC00            ldd 0,y
 C2DE  E30C              addd 12,x
 C2E0  1AEE02            ldy 2,x
 C2E3  18ED00            std 0,y
 C2E6                  clock.18::	
                       ;    if(clock.l<time) {
 C2E6  EC0A              ldd 10,x
 C2E8  C30002            addd #2
 C2EB  188F              xgdy
 C2ED  18EC00            ldd 0,y
 C2F0  1AA30C            cpd 12,x
 C2F3  240F              bhs L10
 C2F5                  clock.20::	
                       ;       // carry
                       ;       clock.h++;
 C2F5  1AEE0A            ldy 10,x
 C2F8  18EC00            ldd 0,y
 C2FB  C30001            addd #1
 C2FE  1AEE0A            ldy 10,x
 C301  18ED00            std 0,y
 C304                  clock.21::	
                       ;    }
 C304                  L10:
 C304                  clock.22::	
                       ;    return clock;
 C304  EC06              ldd 6,x
 C306  1AEE0A            ldy 10,x
 C309  3C                pshx
 C30A  8F                xgdx
 C30B  CC0004            ldd #4
 C30E  BDCF1B            jsr __asgnblk
 C311  38                pulx
 C312                  L8:
 C312  8F                xgdx
 C313  C30004            addd #4
 C316  8F                xgdx
 C317  35                txs
 C318  38                pulx
 C319  1838              puly
 C31B  39                rts
                       ;  IX -> 0,x
                       ;              B -> 8,x
                       ;              A -> 4,x
 C31C                  _clock_compare::
 C31C  37                pshb
 C31D  36                psha
 C31E  3C                pshx
 C31F  30                tsx
 C320  3C                pshx
 C321  30                tsx
 C322                  clock.28::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; signed char clock_compare(PRESTO_TIME_T A,PRESTO_TIME_T B) {
                       ;    if(A.h < B.h) return -1;
 C322  1AEE04            ldy 4,x
 C325  18EC00            ldd 0,y
 C328  1AEE08            ldy 8,x
 C32B  CDA300            cpd 0,y
 C32E  240D              bhs L13
 C330  CCFFFF            ldd #-1
 C333  8F                xgdx
 C334  C30002            addd #2
 C337  8F                xgdx
 C338  35                txs
 C339  38                pulx
 C33A  1838              puly
 C33C  39                rts
 C33D                  L13:
 C33D                  clock.29::	
                       ;    if(A.h > B.h) return 1;
 C33D  1AEE04            ldy 4,x
 C340  18EC00            ldd 0,y
 C343  1AEE08            ldy 8,x
 C346  CDA300            cpd 0,y
 C349  230D              bls L15
 C34B  CC0001            ldd #1
 C34E  8F                xgdx
 C34F  C30002            addd #2
 C352  8F                xgdx
 C353  35                txs
 C354  38                pulx
 C355  1838              puly
 C357  39                rts
 C358                  L15:
 C358                  clock.31::	
                       ;    // we now know that A.h == B.h
                       ;    if(A.l < B.l) return -1;
 C358  EC04              ldd 4,x
 C35A  C30002            addd #2
 C35D  188F              xgdy
 C35F  18EC00            ldd 0,y
 C362  37                pshb ; 
 C363  36                psha ; spill
 C364  EC08              ldd 8,x
 C366  C30002            addd #2
 C369  188F              xgdy
 C36B  32                pula ; 
 C36C  33                pulb ; reload
 C36D  CDA300            cpd 0,y
 C370  240D              bhs L17
 C372  CCFFFF            ldd #-1
 C375  8F                xgdx
 C376  C30002            addd #2
 C379  8F                xgdx
 C37A  35                txs
 C37B  38                pulx
 C37C  1838              puly
 C37E  39                rts
 C37F                  L17:
 C37F                  clock.32::	
                       ;    if(A.l > B.l) return 1;
 C37F  EC04              ldd 4,x
 C381  C30002            addd #2
 C384  188F              xgdy
 C386  18EC00            ldd 0,y
 C389  37                pshb ; 
 C38A  36                psha ; spill
 C38B  EC08              ldd 8,x
 C38D  C30002            addd #2
 C390  188F              xgdy
 C392  32                pula ; 
 C393  33                pulb ; reload
 C394  CDA300            cpd 0,y
 C397  230D              bls L19
 C399  CC0001            ldd #1
 C39C  8F                xgdx
 C39D  C30002            addd #2
 C3A0  8F                xgdx
 C3A1  35                txs
 C3A2  38                pulx
 C3A3  1838              puly
 C3A5  39                rts
 C3A6                  L19:
 C3A6                  clock.33::	
                       ;    return 0;
 C3A6  CC0000            ldd #0
 C3A9  8F                xgdx
 C3AA  C30002            addd #2
 C3AD  8F                xgdx
 C3AE  35                txs
 C3AF  38                pulx
 C3B0  1838              puly
 C3B2  39                rts
 C3B3                  L12:
 C3B3  8F                xgdx
 C3B4  C30002            addd #2
 C3B7  8F                xgdx
 C3B8  35                txs
 C3B9  38                pulx
 C3BA  1838              puly
 C3BC  39                rts
                         .area memory(abs)
                         .org 0xffd6
 FFD6                  _normal_interrupt_vectors::
 FFD6  C462              .word _inert_sci_isr
 FFD8  C464              .word _inert_spi_isr
 FFDA  C466              .word _inert_paie_isr
 FFDC  C468              .word _inert_pao_isr
 FFDE  C46A              .word _inert_tof_isr
 FFE0  C46C              .word _inert_toc5_isr
 FFE2  C46E              .word _inert_toc4_isr
 FFE4  C470              .word _inert_toc3_isr
 FFE6  C472              .word _inert_toc2_isr
 FFE8  C474              .word _inert_toc1_isr
 FFEA  C476              .word _inert_tic3_isr
 FFEC  C478              .word _inert_tic2_isr
 FFEE  C47A              .word _inert_tic1_isr
 FFF0  C47C              .word _inert_rti_isr
 FFF2  C47E              .word _inert_irq_isr
 FFF4  C480              .word _inert_xirq_isr
 FFF6  C482              .word _inert_swi_isr
 FFF8  C484              .word _inert_illop_isr
 FFFA  C486              .word _inert_cop_isr
 FFFC  C488              .word _inert_clm_isr
 FFFE  C48A              .word _inert_reset_isr
                         .area data
                         .area text
                       ;  IX -> 0,x
 C3BD                  __HC11Setup::
 C3BD  0F                    sei
 C3BE                  system.113::	
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   C O M M E N T A R Y
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   D E P E N D E N C I E S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #include "hc11regs.h"
                       ; #include "system.h"
                       ; #include "kernel\kernel.h"
                       ; //#include "services\serial.h"
                       ; //#include "services\motors.h"
                       ; //#include "services\sound.h"
                       ; 
                       ; // ICC only
                       ; extern void _start();   // entry point in crt11.s
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   C O N S T A N T S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   D A T A   T Y P E S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   S T A T I C   F U N C T I O N   P R O T O T Y P E S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #pragma interrupt presto_swi
                       ; void presto_swi(void);
                       ; 
                       ; #pragma interrupt inert_isr
                       ; void inert_isr(void);
                       ; 
                       ; void inert_sci_isr(void);
                       ; void inert_spi_isr(void);
                       ; void inert_paie_isr(void);
                       ; void inert_pao_isr(void);
                       ; void inert_tof_isr(void);
                       ; void inert_toc5_isr(void);
                       ; void inert_toc4_isr(void);
                       ; void inert_toc3_isr(void);
                       ; void inert_toc2_isr(void);
                       ; void inert_toc1_isr(void);
                       ; void inert_tic3_isr(void);
                       ; void inert_tic2_isr(void);
                       ; void inert_tic1_isr(void);
                       ; void inert_rti_isr(void);
                       ; void inert_irq_isr(void);
                       ; void inert_xirq_isr(void);
                       ; void inert_swi_isr(void);
                       ; void inert_illop_isr(void);
                       ; void inert_cop_isr(void);
                       ; void inert_clm_isr(void);
                       ; void inert_reset_isr(void);
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   S T A T I C   G L O B A L   D A T A
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // INTERRUPT VECTORS
                       ; 
                       ; #pragma abs_address:0xFFD6 // for NORMAL and EXPANDED MULTIPLEXED modes
                       ; void (*normal_interrupt_vectors[])() = {
                       ;    inert_sci_isr,      // SCI    -   presto_serial_isr
                       ;    inert_spi_isr,      // SPI
                       ;    inert_paie_isr,     // PAIE
                       ;    inert_pao_isr,      // PAO
                       ;    inert_tof_isr,      // TOF
                       ;    inert_toc5_isr,     // TOC5
                       ;    inert_toc4_isr,     // TOC4
                       ;    inert_toc3_isr,     // TOC3   -   motor_isr
                       ;    inert_toc2_isr,     // TOC2   -   presto_system_isr
                       ;    inert_toc1_isr,     // TOC1
                       ;    inert_tic3_isr,     // TIC3
                       ;    inert_tic2_isr,     // TIC2
                       ;    inert_tic1_isr,     // TIC1
                       ;    inert_rti_isr,      // RTI
                       ;    inert_irq_isr,      // IRQ
                       ;    inert_xirq_isr,     // XIRQ
                       ;    inert_swi_isr,      // SWI
                       ;    inert_illop_isr,    // ILLOP
                       ;    inert_cop_isr,      // COP
                       ;    inert_clm_isr,      // CLM
                       ;    inert_reset_isr     // RESET
                       ; };
                       ; #pragma end_abs_address
                       ; 
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   E X P O R T E D   F U N C T I O N S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   S T A T I C   F U N C T I O N S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // This function is called from the startup (crt11.s) before interrupts have
                       ; // been turned on but after the stack has been set up.
                       ; 
                       ; void _HC11Setup() {
                       ; 
                       ;    INTR_OFF();
                       ; 
                       ;    // RAM would start at $0000 if it were enabled
                       ;    // control registers are mapped to locations $1000-$103F (default)
                       ;    INIT=0x01;
 C3BE  C601              ldab #1
 C3C0  F7103D            stab 0x103d
 C3C3                  system.117::	
                       ; 
                       ;    // disable output compare interrupts for TOC1,TOC2,TOC3,TOC4,TOC5
                       ;    // disable input capture interrupts for TIC1,TIC2,TIC3
                       ;    TMSK1=0x00;
 C3C3  7F1022            clr 0x1022
 C3C6                  system.121::	
                       ; 
                       ;    // set prescaler for timer to 1
                       ;    // disable TOF, RTIF, PAOVF, PAIF interrupts
                       ;    TMSK2=0x00;
 C3C6  7F1024            clr 0x1024
 C3C9                  system.124::	
                       ; 
                       ;    // disable SPI subsystem, disable SPI interrupt
                       ;    SPCR=0x04;
 C3C9  C604              ldab #4
 C3CB  F71028            stab 0x1028
 C3CE                  system.127::	
                       ; 
                       ;    // disable all serial interrupts
                       ;    SCCR2=0x00;
 C3CE  7F102D            clr 0x102d
 C3D1                  system.130::	
                       ; 
                       ;    // disable parallel I/O (and strobe A interrupt)
                       ;    PIOC=0x00;
 C3D1  7F1002            clr 0x1002
 C3D4                  system.133::	
                       ; 
                       ;    // disable SECURITY and COP, disable ROM and EEPROM
                       ;    CONFIG=0x0C;
 C3D4  C60C              ldab #12
 C3D6  F7103F            stab 0x103f
 C3D9                  system.138::	
                       ; 
                       ;    // turn on the A2D subsystem (wait 100 usec before using)
                       ;    // use "E clock" to drive the A2D
                       ;    // disable COP clock monitor (interrupt)
                       ;    OPTION=0xA0;  // OPTION_ADPU=1,OPTION_CSEL=0
 C3D9  C6A0              ldab #160
 C3DB  F71039            stab 0x1039
 C3DE                  system.140::	
                       ; 
                       ;    normal_interrupt_vectors[INTR_SCI]=  inert_sci_isr;
 C3DE  CCC462            ldd #_inert_sci_isr
 C3E1  FDFFD6            std _normal_interrupt_vectors
 C3E4                  system.141::	
                       ;    normal_interrupt_vectors[INTR_SPI]=  inert_spi_isr;
 C3E4  CCC464            ldd #_inert_spi_isr
 C3E7  FDFFD8            std _normal_interrupt_vectors+2
 C3EA                  system.142::	
                       ;    normal_interrupt_vectors[INTR_PAIE]= inert_paie_isr;
 C3EA  CCC466            ldd #_inert_paie_isr
 C3ED  FDFFDA            std _normal_interrupt_vectors+4
 C3F0                  system.143::	
                       ;    normal_interrupt_vectors[INTR_PAO]=  inert_pao_isr;
 C3F0  CCC468            ldd #_inert_pao_isr
 C3F3  FDFFDC            std _normal_interrupt_vectors+6
 C3F6                  system.144::	
                       ;    normal_interrupt_vectors[INTR_TOF]=  inert_tof_isr;
 C3F6  CCC46A            ldd #_inert_tof_isr
 C3F9  FDFFDE            std _normal_interrupt_vectors+8
 C3FC                  system.145::	
                       ;    normal_interrupt_vectors[INTR_TOC5]= inert_toc5_isr;
 C3FC  CCC46C            ldd #_inert_toc5_isr
 C3FF  FDFFE0            std _normal_interrupt_vectors+10
 C402                  system.146::	
                       ;    normal_interrupt_vectors[INTR_TOC4]= inert_toc4_isr;
 C402  CCC46E            ldd #_inert_toc4_isr
 C405  FDFFE2            std _normal_interrupt_vectors+12
 C408                  system.147::	
                       ;    normal_interrupt_vectors[INTR_TOC3]= inert_toc3_isr;
 C408  CCC470            ldd #_inert_toc3_isr
 C40B  FDFFE4            std _normal_interrupt_vectors+14
 C40E                  system.148::	
                       ;    normal_interrupt_vectors[INTR_TOC2]= inert_toc2_isr;
 C40E  CCC472            ldd #_inert_toc2_isr
 C411  FDFFE6            std _normal_interrupt_vectors+16
 C414                  system.149::	
                       ;    normal_interrupt_vectors[INTR_TOC1]= inert_toc1_isr;
 C414  CCC474            ldd #_inert_toc1_isr
 C417  FDFFE8            std _normal_interrupt_vectors+18
 C41A                  system.150::	
                       ;    normal_interrupt_vectors[INTR_TIC3]= inert_tic3_isr;
 C41A  CCC476            ldd #_inert_tic3_isr
 C41D  FDFFEA            std _normal_interrupt_vectors+20
 C420                  system.151::	
                       ;    normal_interrupt_vectors[INTR_TIC2]= inert_tic2_isr;
 C420  CCC478            ldd #_inert_tic2_isr
 C423  FDFFEC            std _normal_interrupt_vectors+22
 C426                  system.152::	
                       ;    normal_interrupt_vectors[INTR_TIC1]= inert_tic1_isr;
 C426  CCC47A            ldd #_inert_tic1_isr
 C429  FDFFEE            std _normal_interrupt_vectors+24
 C42C                  system.153::	
                       ;    normal_interrupt_vectors[INTR_RTI]=  inert_rti_isr;
 C42C  CCC47C            ldd #_inert_rti_isr
 C42F  FDFFF0            std _normal_interrupt_vectors+26
 C432                  system.154::	
                       ;    normal_interrupt_vectors[INTR_IRQ]=  inert_irq_isr;
 C432  CCC47E            ldd #_inert_irq_isr
 C435  FDFFF2            std _normal_interrupt_vectors+28
 C438                  system.155::	
                       ;    normal_interrupt_vectors[INTR_XIRQ]= inert_xirq_isr;
 C438  CCC480            ldd #_inert_xirq_isr
 C43B  FDFFF4            std _normal_interrupt_vectors+30
 C43E                  system.156::	
                       ;    normal_interrupt_vectors[INTR_SWI]=  inert_swi_isr;
 C43E  CCC482            ldd #_inert_swi_isr
 C441  FDFFF6            std _normal_interrupt_vectors+32
 C444                  system.157::	
                       ;    normal_interrupt_vectors[INTR_ILLOP]=presto_fatal_error;
 C444  CCC4B4            ldd #_presto_fatal_error
 C447  FDFFF8            std _normal_interrupt_vectors+34
 C44A                  system.158::	
                       ;    normal_interrupt_vectors[INTR_COP]=  inert_cop_isr;
 C44A  CCC486            ldd #_inert_cop_isr
 C44D  FDFFFA            std _normal_interrupt_vectors+36
 C450                  system.159::	
                       ;    normal_interrupt_vectors[INTR_CLM]=  inert_clm_isr;
 C450  CCC488            ldd #_inert_clm_isr
 C453  FDFFFC            std _normal_interrupt_vectors+38
 C456                  system.160::	
                       ;    normal_interrupt_vectors[INTR_RESET]=_start;
 C456  CCC000            ldd #__start
 C459  FDFFFE            std _normal_interrupt_vectors+40
 C45C                  system.165::	
                       ; 
                       ;    // get out of SPECIAL TEST operating mode
                       ;    // go into EXPANDED MULTIPLEXED operating mode
                       ;    // promote IRQ interrupt priority
                       ;    HPRIO=0x25;
 C45C  C625              ldab #37
 C45E  F7103C            stab 0x103c
 C461                  system.168::	
                       ; 
                       ;    //INTR_ON();
                       ; }
 C461                  L11:
 C461  39                rts
                       ;  IX -> 0,x
 C462                  _inert_sci_isr::
 C462  3B                rti
 C463                  system.172::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void inert_sci_isr(void)   { asm("rti"); }
 C463                  L32:
 C463  39                rts
                       ;  IX -> 0,x
 C464                  _inert_spi_isr::
 C464  3B                rti
 C465                  system.173::	
                       ; void inert_spi_isr(void)   { asm("rti"); }
 C465                  L33:
 C465  39                rts
                       ;  IX -> 0,x
 C466                  _inert_paie_isr::
 C466  3B                rti
 C467                  system.174::	
                       ; void inert_paie_isr(void)  { asm("rti"); }
 C467                  L34:
 C467  39                rts
                       ;  IX -> 0,x
 C468                  _inert_pao_isr::
 C468  3B                rti
 C469                  system.175::	
                       ; void inert_pao_isr(void)   { asm("rti"); }
 C469                  L35:
 C469  39                rts
                       ;  IX -> 0,x
 C46A                  _inert_tof_isr::
 C46A  3B                rti
 C46B                  system.176::	
                       ; void inert_tof_isr(void)   { asm("rti"); }
 C46B                  L36:
 C46B  39                rts
                       ;  IX -> 0,x
 C46C                  _inert_toc5_isr::
 C46C  3B                rti
 C46D                  system.177::	
                       ; void inert_toc5_isr(void)  { asm("rti"); }
 C46D                  L37:
 C46D  39                rts
                       ;  IX -> 0,x
 C46E                  _inert_toc4_isr::
 C46E  3B                rti
 C46F                  system.178::	
                       ; void inert_toc4_isr(void)  { asm("rti"); }
 C46F                  L38:
 C46F  39                rts
                       ;  IX -> 0,x
 C470                  _inert_toc3_isr::
 C470  3B                rti
 C471                  system.179::	
                       ; void inert_toc3_isr(void)  { asm("rti"); }
 C471                  L39:
 C471  39                rts
                       ;  IX -> 0,x
 C472                  _inert_toc2_isr::
 C472  3B                rti
 C473                  system.180::	
                       ; void inert_toc2_isr(void)  { asm("rti"); }
 C473                  L40:
 C473  39                rts
                       ;  IX -> 0,x
 C474                  _inert_toc1_isr::
 C474  3B                rti
 C475                  system.181::	
                       ; void inert_toc1_isr(void)  { asm("rti"); }
 C475                  L41:
 C475  39                rts
                       ;  IX -> 0,x
 C476                  _inert_tic3_isr::
 C476  3B                rti
 C477                  system.182::	
                       ; void inert_tic3_isr(void)  { asm("rti"); }
 C477                  L42:
 C477  39                rts
                       ;  IX -> 0,x
 C478                  _inert_tic2_isr::
 C478  3B                rti
 C479                  system.183::	
                       ; void inert_tic2_isr(void)  { asm("rti"); }
 C479                  L43:
 C479  39                rts
                       ;  IX -> 0,x
 C47A                  _inert_tic1_isr::
 C47A  3B                rti
 C47B                  system.184::	
                       ; void inert_tic1_isr(void)  { asm("rti"); }
 C47B                  L44:
 C47B  39                rts
                       ;  IX -> 0,x
 C47C                  _inert_rti_isr::
 C47C  3B                rti
 C47D                  system.185::	
                       ; void inert_rti_isr(void)   { asm("rti"); }
 C47D                  L45:
 C47D  39                rts
                       ;  IX -> 0,x
 C47E                  _inert_irq_isr::
 C47E  3B                rti
 C47F                  system.186::	
                       ; void inert_irq_isr(void)   { asm("rti"); }
 C47F                  L46:
 C47F  39                rts
                       ;  IX -> 0,x
 C480                  _inert_xirq_isr::
 C480  3B                rti
 C481                  system.187::	
                       ; void inert_xirq_isr(void)  { asm("rti"); }
 C481                  L47:
 C481  39                rts
                       ;  IX -> 0,x
 C482                  _inert_swi_isr::
 C482  3B                rti
 C483                  system.188::	
                       ; void inert_swi_isr(void)   { asm("rti"); }
 C483                  L48:
 C483  39                rts
                       ;  IX -> 0,x
 C484                  _inert_illop_isr::
 C484  3B                rti
 C485                  system.189::	
                       ; void inert_illop_isr(void) { asm("rti"); }
 C485                  L49:
 C485  39                rts
                       ;  IX -> 0,x
 C486                  _inert_cop_isr::
 C486  3B                rti
 C487                  system.190::	
                       ; void inert_cop_isr(void)   { asm("rti"); }
 C487                  L50:
 C487  39                rts
                       ;  IX -> 0,x
 C488                  _inert_clm_isr::
 C488  3B                rti
 C489                  system.191::	
                       ; void inert_clm_isr(void)   { asm("rti"); }
 C489                  L51:
 C489  39                rts
                       ;  IX -> 0,x
 C48A                  _inert_reset_isr::
 C48A  3B                rti
 C48B                  system.192::	
                       ; void inert_reset_isr(void) { asm("rti"); }
 C48B                  L52:
 C48B  39                rts
                       ;  IX -> 0,x
                       ;         vector -> 8,x
                       ;           intr -> 5,x
 C48C                  _set_interrupt::
 C48C  37                pshb
 C48D  36                psha
 C48E  3C                pshx
 C48F  30                tsx
 C490  3C                pshx
 C491  30                tsx
 C492  EC04              ldd 4,x
 C494  E705              stab 5,x
 C496                  system.198::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; //extern void os_set_irq(int number, void (*fn)() );
                       ; void set_interrupt(BYTE intr, void (*vector)(void)) {
                       ;    if(intr<=INTR_RESET) {
 C496  E605              ldab 5,x
 C498  C114              cmpb #20
 C49A  220E              bhi L54
 C49C                  system.199::	
                       ;       normal_interrupt_vectors[intr]=vector;
 C49C  E605              ldab 5,x
 C49E  4F                clra
 C49F  05                lsld
 C4A0  C3FFD6            addd #_normal_interrupt_vectors
 C4A3  188F              xgdy
 C4A5  EC08              ldd 8,x
 C4A7  18ED00            std 0,y
 C4AA                  system.200::	
                       ;    }
 C4AA                  L54:
 C4AA                  system.201::	
                       ; }
 C4AA                  L53:
 C4AA  8F                xgdx
 C4AB  C30002            addd #2
 C4AE  8F                xgdx
 C4AF  35                txs
 C4B0  38                pulx
 C4B1  1838              puly
 C4B3  39                rts
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;          delay -> 3,x
 C4B4                  _presto_fatal_error::
 C4B4  BDCE72            jsr __enterb
 C4B7  04                .byte 0x4
 C4B8  0F                    sei
 C4B9  8EB5FF            lds #init_sp
 C4BC                  system.219::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   S A F E T Y   C H E C K
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // this is the memory location for the motor controller
                       ; #define ERROR_PORT *(unsigned char *)(0x7FFF)
                       ; 
                       ; void presto_fatal_error(void) {
                       ;    // should never get here
                       ;    BYTE delay;
                       ;    INTR_OFF();
                       ; 
                       ;    // reload the original stack pointer, so we don't trash anything else
                       ;    asm("lds #init_sp");
                       ; 
                       ;    // speaker is always an output
                       ;    BITSET(DDRD,4);              // LED is an output
 C4BC  18CE1009          ldy #0x1009
 C4C0  181C0010          bset 0,y,#16
 C4C4  202A              bra L58
 C4C6                  L57:
 C4C6                  system.222::	
                       ;    while(1) {
                       ;       // toggle speaker
                       ;       BITNOT(PORTA,3);
 C4C6  F61000            ldab 0x1000 ; vol
 C4C9  4F                clra
 C4CA  8800              eora #0
 C4CC  C808              eorb #8
 C4CE  F71000            stab 0x1000
 C4D1                  system.224::	
                       ;       // LED on
                       ;       BITCLR(PORTD,4);
 C4D1  18CE1008          ldy #0x1008
 C4D5  181D0010          bclr 0,y,~#-17
 C4D9  2005              bra L61
 C4DB                  L60:
 C4DB                  system.229::	
                       ;       // delay
                       ;       while(--delay>0) {
                       ;          // This will force the motor lights to blink so fast
                       ;          // that all eight of them will appear to be on.
                       ;          ERROR_PORT=delay;
 C4DB  E603              ldab 3,x
 C4DD  F77FFF            stab 0x7fff
 C4E0                  system.230::	
                       ;       }
 C4E0                  L61:
 C4E0  E603              ldab 3,x
 C4E2  4F                clra
 C4E3  830001            subd #1
 C4E6  E702              stab 2,x
 C4E8  E703              stab 3,x
 C4EA  E602              ldab 2,x
 C4EC  C100              cmpb #0
 C4EE  22EB              bhi L60
 C4F0                  system.231::	
                       ;    }
 C4F0                  L58:
 C4F0  20D4              bra L57
 C4F2                  L56:
 C4F2  8F                xgdx
 C4F3  C30004            addd #4
 C4F6  8F                xgdx
 C4F7  35                txs
 C4F8  38                pulx
 C4F9  39                rts
                         .area memory(abs)
                         .org 0xbfd6
 BFD6                  _special_interrupt_vectors::
 BFD6  C462              .word _inert_sci_isr
 BFD8  C464              .word _inert_spi_isr
 BFDA  C466              .word _inert_paie_isr
 BFDC  C468              .word _inert_pao_isr
 BFDE  C46A              .word _inert_tof_isr
 BFE0  C46C              .word _inert_toc5_isr
 BFE2  C46E              .word _inert_toc4_isr
 BFE4  C470              .word _inert_toc3_isr
 BFE6  C472              .word _inert_toc2_isr
 BFE8  C474              .word _inert_toc1_isr
 BFEA  C476              .word _inert_tic3_isr
 BFEC  C478              .word _inert_tic2_isr
 BFEE  C47A              .word _inert_tic1_isr
 BFF0  C47C              .word _inert_rti_isr
 BFF2  C47E              .word _inert_irq_isr
 BFF4  C480              .word _inert_xirq_isr
 BFF6  C482              .word _inert_swi_isr
 BFF8  C484              .word _inert_illop_isr
 BFFA  C486              .word _inert_cop_isr
 BFFC  C488              .word _inert_clm_isr
 BFFE  C000              .word __start
                         .area data
                         .area data
 8008                  _global_new_sp::
 8008                    .blkb 2
                         .area idata
--- 0000 0000              .word 0
                         .area data
 800A                  _global_old_sp_p::
 800A                    .blkb 2
                         .area idata
--- 0002 0000              .word 0
                         .area data
 800C                  _global_new_fn::
 800C                    .blkb 2
                         .area idata
--- 0004 0000              .word 0
                         .area data
 800E                  _current_tcb_p::
 800E                    .blkb 2
                         .area idata
--- 0006 0000              .word 0
                         .area data
 8010                  _current_tid::
 8010                    .blkb 1
                         .area idata
--- 0008 00                .byte 0
                         .area data
 8011                  _tcb_head_p::
 8011                    .blkb 2
                         .area idata
--- 0009 0000              .word 0
                         .area data
 8013                  _free_tcb_p::
 8013                    .blkb 2
                         .area idata
--- 000B 0000              .word 0
                         .area data
 8015                  _presto_initialized::
 8015                    .blkb 1
                         .area idata
--- 000D 00                .byte 0
                         .area data
 8016                  _free_mail_p::
 8016                    .blkb 2
                         .area idata
--- 000E 0000              .word 0
                         .area data
 8018                  _po_mail_p::
 8018                    .blkb 2
                         .area idata
--- 0010 0000              .word 0
                         .area text
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;          ?temp -> 4,x
                       ;          ?temp -> 2,x
                       ;          ?temp -> 4,x
                       ;          count -> 7,x
 C4FA                  _presto_init::
 C4FA  BDCE72            jsr __enterb
 C4FD  08                .byte 0x8
 C4FE                  kernel.80::	
                       ; 
                       ; #include "hc11regs.h"
                       ; #include "system.h"
                       ; #include "presto.h"
                       ; #include "kernel\kernel.h"
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #define CYCLES_PER_MS     2000
                       ; #define MS_PER_TICK       100
                       ; #define CYCLES_PER_TICK   CYCLES_PER_MS*MS_PER_TICK
                       ; #define IDLE_PRIORITY     0
                       ; #define IDLE_STACK_SIZE   50
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #define DISABLE_CCR_INTERRUPT_BIT      asm("oraa #0x10");
                       ; #define ENABLE_CCR_INTERRUPT_BIT      asm("anda ~#0x10");
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // GLOBAL VARIABLES
                       ; // These are used to pass arguments to inline assembly routines
                       ; 
                       ; /*static*/ BYTE * global_new_sp=NULL;
                       ; /*static*/ BYTE ** global_old_sp_p=NULL;
                       ; /*static*/ void (*global_new_fn)(void)=NULL;
                       ; /*static*/ BYTE * global_save_sp;     // do not put this on the stack (BOOM)
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // STATIC GLOBAL VARIABLES
                       ; 
                       ; /*static*/ PRESTO_TCB_T * current_tcb_p=NULL;
                       ; /*static*/ PRESTO_TID_T current_tid=0;
                       ; /*static*/ PRESTO_TCB_T * tcb_head_p=NULL;
                       ; /*static*/ PRESTO_TCB_T * free_tcb_p=NULL;
                       ; /*static*/ PRESTO_TCB_T tcb_list[MAX_TASKS];
                       ; 
                       ; /*static*/ PRESTO_TIME_T presto_master_clock;
                       ; /*static*/ BYTE presto_initialized=0;
                       ; 
                       ; // idle task stuff
                       ; /*static*/ BYTE idle_stack[IDLE_STACK_SIZE];
                       ; /*static*/ PRESTO_TCB_T * idle_tcb_p;
                       ; /*static*/ BYTE idle_tid;
                       ; 
                       ; // mail stuff
                       ; /*static*/ PRESTO_MESSAGE_T * free_mail_p=NULL;
                       ; /*static*/ PRESTO_MESSAGE_T * po_mail_p=NULL;
                       ; /*static*/ PRESTO_MESSAGE_T mail_list[MAX_MESSAGES];
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; // FUNCTION PROTOTYPES
                       ; 
                       ; /*static*/ PRESTO_TCB_T * presto_next_tcb_to_run(void);
                       ; /*static*/ void presto_start_master_timer(void);
                       ; /*static*/ void presto_restart_master_timer(void);
                       ; /*static*/ void idle_task(void);
                       ; /*static*/ BYTE deliver_mail(void);
                       ; /*static*/ PRESTO_TCB_T * tid_to_tcbptr(BYTE tid);
                       ; /*static*/ void print_tcb_list(void);
                       ; /*static*/ void print_mail_list(void);
                       ; /*static*/ void idle_task(void);
                       ; 
                       ; void presto_system_isr_wrapper(void);
                       ; void presto_system_isr(void);
                       ; void context_switch_wrapper(void);
                       ; void context_switch(void);
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   I N I T I A L I Z A T I O N
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void presto_init(void) {
                       ;    BYTE count;
                       ; 
                       ;    // initialize once and only once
                       ;    if(presto_initialized) return;
 C4FE  7D8015            tst _presto_initialized
 C501  2703              beq L12
 C503  7EC5EE            jmp L11
 C506                  L12:
 C506                  kernel.81::	
                       ;    presto_initialized++;
 C506  F68015            ldab _presto_initialized
 C509  4F                clra
 C50A  C30001            addd #1
 C50D  F78015            stab _presto_initialized
 C510                  kernel.84::	
                       ; 
                       ;    // initialize master clock
                       ;    presto_master_clock=clock_reset();
 C510  CC9D75            ldd #_presto_master_clock
 C513  BDC2A3            jsr _clock_reset
 C516                  kernel.87::	
                       ; 
                       ;    // initialize TCB list
                       ;    for(count=0;count<MAX_TASKS;count++) {
 C516  6F07              clr 7,x
 C518  2050              bra L17
 C51A                  L14:
 C51A                  kernel.88::	
                       ;       tcb_list[count].next=&tcb_list[count+1];
 C51A  E607              ldab 7,x
 C51C  4F                clra
 C51D  188F              xgdy
 C51F  CC0012            ldd #18
 C522  BDCE13            jsr __muli
 C525  ED04              std 4,x
 C527  C39D85            addd #_tcb_list+12
 C52A  188F              xgdy
 C52C  EC04              ldd 4,x
 C52E  C39D8B            addd #_tcb_list+18
 C531  18ED00            std 0,y
 C534                  kernel.89::	
                       ;       tcb_list[count].task_id=count;
 C534  E607              ldab 7,x
 C536  4F                clra
 C537  ED02              std 2,x
 C539  CC0012            ldd #18
 C53C  1AEE02            ldy 2,x
 C53F  BDCE13            jsr __muli
 C542  C39D79            addd #_tcb_list
 C545  188F              xgdy
 C547  E603              ldab 3,x
 C549  18E700            stab 0,y
 C54C                  kernel.90::	
                       ;       tcb_list[count].state=STATE_INACTIVE;
 C54C  E607              ldab 7,x
 C54E  4F                clra
 C54F  188F              xgdy
 C551  CC0012            ldd #18
 C554  BDCE13            jsr __muli
 C557  C39D83            addd #_tcb_list+10
 C55A  188F              xgdy
 C55C  CC0002            ldd #2
 C55F  18ED00            std 0,y
 C562                  kernel.91::	
                       ;    }
 C562                  L15:
 C562  E607              ldab 7,x
 C564  4F                clra
 C565  C30001            addd #1
 C568  E707              stab 7,x
 C56A                  L17:
 C56A  E607              ldab 7,x
 C56C  C106              cmpb #6
 C56E  25AA              blo L14
 C570                  kernel.92::	
                       ;    tcb_list[MAX_TASKS-1].next=NULL;
 C570  CC0000            ldd #0
 C573  FD9DDF            std _tcb_list+90+12
 C576                  kernel.93::	
                       ;    free_tcb_p=&tcb_list[0];
 C576  CC9D79            ldd #_tcb_list
 C579  FD8013            std _free_tcb_p
 C57C                  kernel.96::	
                       ; 
                       ;    // initialize mail list
                       ;    for(count=0;count<MAX_MESSAGES;count++) {
 C57C  6F07              clr 7,x
 C57E  2031              bra L26
 C580                  L23:
 C580                  kernel.97::	
                       ;       mail_list[count].next=&mail_list[count+1];  // goes past end of array - OK
 C580  E607              ldab 7,x
 C582  4F                clra
 C583  05                lsld
 C584  05                lsld
 C585  05                lsld
 C586  05                lsld
 C587  ED04              std 4,x
 C589  C39C0E            addd #_mail_list+14
 C58C  188F              xgdy
 C58E  EC04              ldd 4,x
 C590  C39C10            addd #_mail_list+16
 C593  18ED00            std 0,y
 C596                  kernel.98::	
                       ;       mail_list[count].serial_number=count;
 C596  E607              ldab 7,x
 C598  4F                clra
 C599  ED02              std 2,x
 C59B  05                lsld
 C59C  05                lsld
 C59D  05                lsld
 C59E  05                lsld
 C59F  C39C00            addd #_mail_list
 C5A2  188F              xgdy
 C5A4  EC02              ldd 2,x
 C5A6  18ED00            std 0,y
 C5A9                  kernel.99::	
                       ;    }
 C5A9                  L24:
 C5A9  E607              ldab 7,x
 C5AB  4F                clra
 C5AC  C30001            addd #1
 C5AF  E707              stab 7,x
 C5B1                  L26:
 C5B1  E607              ldab 7,x
 C5B3  C114              cmpb #20
 C5B5  25C9              blo L23
 C5B7                  kernel.100::	
                       ;    mail_list[MAX_MESSAGES-1].next=NULL;
 C5B7  CC0000            ldd #0
 C5BA  FD9D3E            std _mail_list+304+14
 C5BD                  kernel.101::	
                       ;    free_mail_p=&mail_list[0];
 C5BD  CC9C00            ldd #_mail_list
 C5C0  FD8016            std _free_mail_p
 C5C3                  kernel.105::	
                       ; 
                       ;    // initialize idle task
                       ;    // must be done after presto_initialized++ because of initialization check
                       ;    idle_tid=presto_create_task(idle_task,idle_stack,IDLE_STACK_SIZE,IDLE_PRIORITY);
 C5C3  CC0000            ldd #0
 C5C6  37                pshb
 C5C7  36                psha
 C5C8  CC0032            ldd #50
 C5CB  37                pshb
 C5CC  36                psha
 C5CD  CC9D43            ldd #_idle_stack
 C5D0  37                pshb
 C5D1  36                psha
 C5D2  CCCD5B            ldd #_idle_task
 C5D5  BDC64E            jsr _presto_create_task
 C5D8  BDCEBB            jsr __movspb
 C5DB  06                .byte 6
 C5DC  4F                clra
 C5DD  5D                tstb
 C5DE  2A01              bpl X0
 C5E0  43                coma
 C5E1                  X0:
 C5E1  F79D40            stab _idle_tid
 C5E4                  kernel.106::	
                       ;    idle_tcb_p=tid_to_tcbptr(idle_tid);
 C5E4  F69D40            ldab _idle_tid
 C5E7  4F                clra
 C5E8  BDCD5E            jsr _tid_to_tcbptr
 C5EB  FD9D41            std _idle_tcb_p
 C5EE                  kernel.107::	
                       ; }
 C5EE                  L11:
 C5EE  8F                xgdx
 C5EF  C30008            addd #8
 C5F2  8F                xgdx
 C5F3  35                txs
 C5F4  38                pulx
 C5F5  39                rts
                       ;  IX -> 0,x
 C5F6                  _presto_start_scheduler::
 C5F6                  kernel.113::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void presto_start_scheduler(void) {
                       ; 
                       ;    if(presto_initialized==0) presto_fatal_error();
 C5F6  7D8015            tst _presto_initialized
 C5F9  2603              bne L32
 C5FB  BDC4B4            jsr _presto_fatal_error
 C5FE                  L32:
 C5FE  0F                    sei
 C5FF                  kernel.119::	
                       ; 
                       ;    // we're about to switch to our first task... interrupts off
                       ;    INTR_OFF();
                       ; 
                       ;    //set_interrupt(INTR_TOC2, presto_system_isr_wrapper);
                       ;    set_interrupt(INTR_TOC2, presto_system_isr);
 C5FF  CCC807            ldd #_presto_system_isr
 C602  37                pshb
 C603  36                psha
 C604  CC0008            ldd #8
 C607  BDC48C            jsr _set_interrupt
 C60A  1838              puly
 C60C                  kernel.120::	
                       ;    set_interrupt(INTR_SWI, context_switch);
 C60C  CCC8A8            ldd #_context_switch
 C60F  37                pshb
 C610  36                psha
 C611  CC0010            ldd #16
 C614  BDC48C            jsr _set_interrupt
 C617  1838              puly
 C619                  kernel.123::	
                       ; 
                       ;    // start timer interrupts for pre-emption
                       ;    presto_start_master_timer();
 C619  BDCDB9            jsr _presto_start_master_timer
 C61C                  kernel.127::	
                       ; 
                       ;    // pick next task to run
                       ;    // first task in list is highest priority and is ready
                       ;    current_tcb_p=tcb_head_p;
 C61C  FC8011            ldd _tcb_head_p
 C61F  FD800E            std _current_tcb_p
 C622                  kernel.128::	
                       ;    if(current_tcb_p==NULL) {
 C622  FC800E            ldd _current_tcb_p
 C625  2603              bne L34
 C627                  kernel.129::	
                       ;       presto_fatal_error();
 C627  BDC4B4            jsr _presto_fatal_error
 C62A                  kernel.130::	
                       ;    }
 C62A                  L34:
 C62A                  kernel.131::	
                       ;    current_tid=current_tcb_p->task_id;
 C62A  18FE800E          ldy _current_tcb_p
 C62E  18E600            ldab 0,y
 C631  F78010            stab _current_tid
 C634                  kernel.137::	
                       ; 
                       ;    // SET UP A NEW STACK AND START EXECUTION USING IT
                       ; 
                       ;    // these parameters will be used in inline assembly...
                       ;    // must be put in global space, not on stack
                       ;    global_new_sp=current_tcb_p->stack_ptr;
 C634  FC800E            ldd _current_tcb_p
 C637  C30002            addd #2
 C63A  188F              xgdy
 C63C  18EC00            ldd 0,y
 C63F  FD8008            std _global_new_sp
 C642  BE8008            lds _global_new_sp
 C645  32                pula
 C646  84EF              anda ~#0x10
 C648  36                psha
 C649  3B                rti
 C64A                  kernel.153::	
                       ; 
                       ;    asm("lds _global_new_sp");
                       ; 
                       ;    // Clear interrupt mask bit (to enable ints) in the CC register on the stack.
                       ;    // That way, the new task will have interrupts enabled when it wakes up.
                       ;    asm("pula");
                       ;    ENABLE_CCR_INTERRUPT_BIT;
                       ;    asm("psha");
                       ; 
                       ;    // Normally, this function would end with an RTS, but we want to act EXACTLY
                       ;    // the same as if we had just been inside of an interrupt.  So we manually
                       ;    // call RTI here to pop the registers and "run" the new task.
                       ;    asm("rti");
                       ; 
                       ;    // we never get here
                       ;    presto_fatal_error();
 C64A  BDC4B4            jsr _presto_fatal_error
 C64D                  kernel.154::	
                       ; }
 C64D                  L31:
 C64D  39                rts
                       ;  IX -> 0,x
                       ;            ptr -> 2,x
                       ;      new_tcb_p -> 4,x
                       ;       priority -> 17,x
                       ;     stack_size -> 14,x
                       ;          stack -> 12,x
                       ;           func -> 8,x
 C64E                  _presto_create_task::
 C64E  BDCE72            jsr __enterb
 C651  46                .byte 0x46
 C652  EC10              ldd 16,x
 C654  E711              stab 17,x
 C656                  kernel.164::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   T A S K   M A N A G E M E N T
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; PRESTO_TID_T presto_create_task( void (*func)(void), BYTE * stack, short stack_size, BYTE priority ) {
                       ; 
                       ;    PRESTO_TCB_T * new_tcb_p;
                       ; 
                       ;    if(presto_initialized==0) presto_fatal_error();
 C656  7D8015            tst _presto_initialized
 C659  2603              bne L37
 C65B  BDC4B4            jsr _presto_fatal_error
 C65E                  L37:
 C65E                  kernel.166::	
                       ; 
                       ;    if(free_tcb_p==NULL) {
 C65E  FC8013            ldd _free_tcb_p
 C661  2610              bne L39
 C663                  kernel.168::	
                       ;       // There are no more TCB's left.
                       ;       presto_fatal_error();
 C663  BDC4B4            jsr _presto_fatal_error
 C666                  kernel.169::	
                       ;       return -1;
 C666  CCFFFF            ldd #-1
 C669  8F                xgdx
 C66A  C30006            addd #6
 C66D  8F                xgdx
 C66E  35                txs
 C66F  38                pulx
 C670  1838              puly
 C672  39                rts
 C673                  L39:
 C673  0F                    sei
 C674                  kernel.176::	
                       ;    }
                       ; 
                       ;    // we're about to mess with tasks, TCB's... interrupts off
                       ;    INTR_OFF();
                       ; 
                       ;    // allocate TCB for new task
                       ;    new_tcb_p=free_tcb_p;
 C674  FC8013            ldd _free_tcb_p
 C677  ED04              std 4,x
 C679                  kernel.177::	
                       ;    free_tcb_p=free_tcb_p->next;
 C679  FC8013            ldd _free_tcb_p
 C67C  C3000C            addd #12
 C67F  188F              xgdy
 C681  18EC00            ldd 0,y
 C684  FD8013            std _free_tcb_p
 C687                  kernel.181::	
                       ; 
                       ;    // initialize TCB elements
                       ;    // new_tcb_p->task_id is already assigned
                       ;    new_tcb_p->stack_top=stack+stack_size-1;
 C687  EC04              ldd 4,x
 C689  C30004            addd #4
 C68C  188F              xgdy
 C68E  EC0E              ldd 14,x
 C690  E30C              addd 12,x
 C692  C3FFFF            addd #-1
 C695  18ED00            std 0,y
 C698                  kernel.182::	
                       ;    new_tcb_p->stack_bottom=stack;
 C698  EC04              ldd 4,x
 C69A  C30006            addd #6
 C69D  188F              xgdy
 C69F  EC0C              ldd 12,x
 C6A1  18ED00            std 0,y
 C6A4                  kernel.183::	
                       ;    new_tcb_p->stack_ptr=new_tcb_p->stack_top;
 C6A4  EC04              ldd 4,x
 C6A6  C30004            addd #4
 C6A9  188F              xgdy
 C6AB  18EC00            ldd 0,y
 C6AE  37                pshb ; 
 C6AF  36                psha ; spill
 C6B0  EC04              ldd 4,x
 C6B2  C30002            addd #2
 C6B5  188F              xgdy
 C6B7  32                pula ; 
 C6B8  33                pulb ; reload
 C6B9  18ED00            std 0,y
 C6BC                  kernel.184::	
                       ;    new_tcb_p->priority=priority;
 C6BC  EC04              ldd 4,x
 C6BE  C30008            addd #8
 C6C1  188F              xgdy
 C6C3  E611              ldab 17,x
 C6C5  18E700            stab 0,y
 C6C8                  kernel.185::	
                       ;    new_tcb_p->state=STATE_READY;
 C6C8  EC04              ldd 4,x
 C6CA  C3000A            addd #10
 C6CD  188F              xgdy
 C6CF  CC0000            ldd #0
 C6D2  18ED00            std 0,y
 C6D5                  kernel.186::	
                       ;    new_tcb_p->mailbox_head=NULL;
 C6D5  EC04              ldd 4,x
 C6D7  C3000E            addd #14
 C6DA  188F              xgdy
 C6DC  CC0000            ldd #0
 C6DF  18ED00            std 0,y
 C6E2                  kernel.187::	
                       ;    new_tcb_p->mailbox_tail=NULL;
 C6E2  EC04              ldd 4,x
 C6E4  C30010            addd #16
 C6E7  188F              xgdy
 C6E9  CC0000            ldd #0
 C6EC  18ED00            std 0,y
 C6EF                  kernel.193::	
                       ; 
                       ;    // SET UP NEW STACK USING ASSEMBLY LANGUAGE
                       ; 
                       ;    // these parameters will be used in inline assembly...
                       ;    // must be put in global space, not on stack
                       ;    global_new_sp=new_tcb_p->stack_ptr;
 C6EF  EC04              ldd 4,x
 C6F1  C30002            addd #2
 C6F4  188F              xgdy
 C6F6  18EC00            ldd 0,y
 C6F9  FD8008            std _global_new_sp
 C6FC                  kernel.194::	
                       ;    global_new_fn=func;
 C6FC  EC08              ldd 8,x
 C6FE  FD800C            std _global_new_fn
 C701  BF9DE5            sts _global_save_sp
 C704  BE8008            lds _global_new_sp
 C707  FC800C            ldd _global_new_fn
 C70A  37                pshb
 C70B  36                psha
 C70C  8600              ldaa #0
 C70E  36                psha
 C70F  36                psha
 C710  36                psha
 C711  36                psha
 C712  36                psha
 C713  36                psha
 C714  07                tpa
 C715  84EF              anda ~#0x10
 C717  36                psha
 C718  BF8008            sts _global_new_sp
 C71B  BE9DE5            lds _global_save_sp
 C71E                  kernel.235::	
                       ; 
                       ;    // store our own SP so we can work on the new task
                       ;    asm("sts _global_save_sp");
                       ; 
                       ;    // load empty SP from task so we can initialize it
                       ;    asm("lds _global_new_sp");
                       ; 
                       ; /*
                       ;    // Set presto_fatal_error as the "return pc" of a new task.  If some bozo
                       ;    // tries to return out of his task's main function, we will cause an alarm.
                       ;    asm("ldd #_presto_fatal_error");
                       ;    asm("pshb");
                       ;    asm("psha");
                       ; */
                       ; 
                       ;    // push the actual function call on the stack
                       ;    asm("ldd _global_new_fn");
                       ;    asm("pshb");
                       ;    asm("psha");
                       ; 
                       ;    // push any old stinkin' registers onto the stack
                       ;    // they'll be pulled off when we start running
                       ;    // we push in interrupt-stack order
                       ;    asm("ldaa #0");
                       ;    asm("psha"); // Y(L) register
                       ;    asm("psha"); // Y(H) register
                       ;    asm("psha"); // X(L) register
                       ;    asm("psha"); // X(H) register
                       ;    asm("psha"); // A register
                       ;    asm("psha"); // B register
                       ;    asm("tpa");  // do not push $00 here, use actual condition codes
                       ;    ENABLE_CCR_INTERRUPT_BIT;  // enable interrupts in pushed CC register (I bit cleared)
                       ;    asm("psha");  // 1 byte, the condition codes
                       ; 
                       ;    // save task SP in TCB
                       ;    asm("sts _global_new_sp");
                       ;    // re-load our own SP so we can return
                       ;    asm("lds _global_save_sp");
                       ; 
                       ;    // recover the altered stack pointer and save it in the TCB
                       ;    new_tcb_p->stack_ptr=global_new_sp;
 C71E  EC04              ldd 4,x
 C720  C30002            addd #2
 C723  188F              xgdy
 C725  FC8008            ldd _global_new_sp
 C728  18ED00            std 0,y
 C72B                  kernel.239::	
                       ; 
                       ;    // INSERT NEW TCB INTO LIST IN PRIORITY ORDER
                       ; 
                       ;    if(tcb_head_p==NULL) {
 C72B  FC8011            ldd _tcb_head_p
 C72E  2615              bne L41
 C730                  kernel.241::	
                       ;       // we are the first TCB in the list
                       ;       tcb_head_p=new_tcb_p;
 C730  EC04              ldd 4,x
 C732  FD8011            std _tcb_head_p
 C735                  kernel.242::	
                       ;       new_tcb_p->next=NULL;
 C735  EC04              ldd 4,x
 C737  C3000C            addd #12
 C73A  188F              xgdy
 C73C  CC0000            ldd #0
 C73F  18ED00            std 0,y
 C742                  kernel.243::	
                       ;    } else if((new_tcb_p->priority)>(tcb_head_p->priority)) {
 C742  7EC7DC            jmp L42
 C745                  L41:
 C745  EC04              ldd 4,x
 C747  C30008            addd #8
 C74A  188F              xgdy
 C74C  18E600            ldab 0,y
 C74F  37                pshb ; 
 C750  36                psha ; spill
 C751  FC8011            ldd _tcb_head_p
 C754  C30008            addd #8
 C757  188F              xgdy
 C759  32                pula ; 
 C75A  33                pulb ; reload
 C75B  18E100            cmpb 0,y
 C75E  2315              bls L43
 C760                  kernel.245::	
                       ;       // advance to the head of the class!
                       ;       new_tcb_p->next=tcb_head_p;
 C760  EC04              ldd 4,x
 C762  C3000C            addd #12
 C765  188F              xgdy
 C767  FC8011            ldd _tcb_head_p
 C76A  18ED00            std 0,y
 C76D                  kernel.246::	
                       ;       tcb_head_p=new_tcb_p;
 C76D  EC04              ldd 4,x
 C76F  FD8011            std _tcb_head_p
 C772                  kernel.247::	
                       ;    } else {
 C772  7EC7DC            jmp L44
 C775                  L43:
 C775                  kernel.248::	
                       ;       PRESTO_TCB_T * ptr=tcb_head_p;
 C775  FC8011            ldd _tcb_head_p
 C778  ED02              std 2,x
 C77A  2030              bra L46
 C77C                  L45:
 C77C                  kernel.250::	
                       ;       while(ptr->next!=NULL) {
                       ;          if((new_tcb_p->priority)>(ptr->next->priority)) break;
 C77C  EC02              ldd 2,x
 C77E  C3000C            addd #12
 C781  188F              xgdy
 C783  18EC00            ldd 0,y
 C786  C30008            addd #8
 C789  188F              xgdy
 C78B  EC04              ldd 4,x
 C78D  C30008            addd #8
 C790  183C              pshy ; spill
 C792  188F              xgdy
 C794  18E600            ldab 0,y
 C797  1838              puly ; reload
 C799  18E100            cmpb 0,y
 C79C  2302              bls L48
 C79E  2018              bra L47
 C7A0                  L48:
 C7A0                  kernel.251::	
                       ;          ptr=ptr->next;
 C7A0  EC02              ldd 2,x
 C7A2  C3000C            addd #12
 C7A5  188F              xgdy
 C7A7  18EC00            ldd 0,y
 C7AA  ED02              std 2,x
 C7AC                  kernel.252::	
                       ;       }
 C7AC                  L46:
 C7AC  EC02              ldd 2,x
 C7AE  C3000C            addd #12
 C7B1  188F              xgdy
 C7B3  18EC00            ldd 0,y
 C7B6  26C4              bne L45
 C7B8                  L47:
 C7B8                  kernel.256::	
                       ; 
                       ;       // ptr->next is either NULL or lower priority than us
                       ;       // either way, we want to get inserted between ptr and ptr->next
                       ;       new_tcb_p->next=ptr->next;
 C7B8  EC02              ldd 2,x
 C7BA  C3000C            addd #12
 C7BD  188F              xgdy
 C7BF  18EC00            ldd 0,y
 C7C2  37                pshb ; 
 C7C3  36                psha ; spill
 C7C4  EC04              ldd 4,x
 C7C6  C3000C            addd #12
 C7C9  188F              xgdy
 C7CB  32                pula ; 
 C7CC  33                pulb ; reload
 C7CD  18ED00            std 0,y
 C7D0                  kernel.257::	
                       ;       ptr->next=new_tcb_p;
 C7D0  EC02              ldd 2,x
 C7D2  C3000C            addd #12
 C7D5  188F              xgdy
 C7D7  EC04              ldd 4,x
 C7D9  18ED00            std 0,y
 C7DC                  kernel.258::	
                       ;    }
 C7DC                  L44:
 C7DC                  L42:
 C7DC  0E                    cli
 C7DD                  kernel.263::	
                       ; 
                       ;    // we're done messing with the task list... interrupts back on
                       ;    INTR_ON();
                       ; 
                       ;    return new_tcb_p->task_id;
 C7DD  1AEE04            ldy 4,x
 C7E0  18E600            ldab 0,y
 C7E3  4F                clra
 C7E4  5D                tstb
 C7E5  2A01              bpl X1
 C7E7  43                coma
 C7E8                  X1:
 C7E8  8F                xgdx
 C7E9  C30006            addd #6
 C7EC  8F                xgdx
 C7ED  35                txs
 C7EE  38                pulx
 C7EF  1838              puly
 C7F1  39                rts
 C7F2                  L36:
 C7F2  8F                xgdx
 C7F3  C30006            addd #6
 C7F6  8F                xgdx
 C7F7  35                txs
 C7F8  38                pulx
 C7F9  1838              puly
 C7FB  39                rts
                       ;  IX -> 0,x
 C7FC                  _presto_kill_self::
 C7FC                  kernel.270::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void presto_kill_self(void) {
                       ;    // TODO - remove TCB from list
                       ;    presto_fatal_error();
 C7FC  BDC4B4            jsr _presto_fatal_error
 C7FF                  kernel.271::	
                       ; }
 C7FF                  L50:
 C7FF  39                rts
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;          ?temp -> 4,x
 C800                  _presto_system_isr_wrapper::
 C800  BDCE72            jsr __enterb
 C803  08                .byte 0x8
 C804                  kernel.287::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   C O N T E X T   S W I T C H I N G   ( I N T E R R U P T )
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; #pragma interrupt presto_system_isr_wrapper
                       ; void presto_system_isr_wrapper(void) {
                       ; 
                       ;    // The ICC compiler adds a "jsr __enterb" at the beginning of my interrupt
                       ;    // service routine.  Apparently, it is concerned with preserving the state
                       ;    // of the X register, and it tries to push it onto the stack and then do some
                       ;    // funny math.  At the end of the ISR, it tries to undo all of the mess, and
                       ;    // it even ends the ISR with a jump instruction.  Yikes!  I use this label
                       ;    // to by-pass this destructive behavior at the top, and later I use an
                       ;    // inline "RTI" instruction to by-pass the stuff at the bottom.
                       ;    presto_fatal_error();
 C804  BDC4B4            jsr _presto_fatal_error
 C807                  	_presto_system_isr::
 C807                  kernel.296::	
                       ; 
                       ;    asm("_presto_system_isr::");
                       ; 
                       ;    // registers are pushed when timer interrupt is executed
                       ; 
                       ;    // interrupts are disabled at this time
                       ; 
                       ;    // take care of clock things
                       ;    presto_master_clock=clock_add(presto_master_clock,MS_PER_TICK);
 C807  CC0064            ldd #100
 C80A  37                pshb
 C80B  36                psha
 C80C  EC00              ldd 0,x
 C80E  C30004            addd #4
 C811  18CE9D75          ldy #_presto_master_clock
 C815  3C                pshx
 C816  8F                xgdx
 C817  CC0004            ldd #4
 C81A  BDCF1B            jsr __asgnblk
 C81D  38                pulx
 C81E  EC00              ldd 0,x
 C820  C30004            addd #4
 C823  37                pshb
 C824  36                psha
 C825  CC9D75            ldd #_presto_master_clock
 C828  BDC2CD            jsr _clock_add
 C82B  1838              puly
 C82D  1838              puly
 C82F                  kernel.297::	
                       ;    presto_restart_master_timer();
 C82F  BDCDEE            jsr _presto_restart_master_timer
 C832                  kernel.300::	
                       ; 
                       ;    // check mail
                       ;    if(deliver_mail()>0) {
 C832  BDCC65            jsr _deliver_mail
 C835  C100              cmpb #0
 C837  235F              bls L52
 C839                  kernel.303::	
                       ; 
                       ;       // check to see if we've clobbered our stack
                       ;       if(((current_tcb_p->stack_ptr)>(current_tcb_p->stack_top))
 C839  FC800E            ldd _current_tcb_p
 C83C  C30002            addd #2
 C83F  188F              xgdy
 C841  18EC00            ldd 0,y
 C844  ED02              std 2,x
 C846  FC800E            ldd _current_tcb_p
 C849  C30004            addd #4
 C84C  188F              xgdy
 C84E  EC02              ldd 2,x
 C850  CDA300            cpd 0,y
 C853  220F              bhi L56
 C855  FC800E            ldd _current_tcb_p
 C858  C30006            addd #6
 C85B  188F              xgdy
 C85D  EC02              ldd 2,x
 C85F  CDA300            cpd 0,y
 C862  2403              bhs L54
 C864                  L56:
 C864                  kernel.305::	
                       ;       ||((current_tcb_p->stack_ptr)<(current_tcb_p->stack_bottom)))
                       ;          presto_fatal_error();
 C864  BDC4B4            jsr _presto_fatal_error
 C867                  L54:
 C867                  kernel.311::	
                       ; 
                       ;       // these parameters will be used in inline assembly...
                       ;       // must be put in global space, not on stack
                       ; 
                       ;       // the ISR will save old SP in old TCB
                       ;       global_old_sp_p=&(current_tcb_p->stack_ptr);
 C867  FC800E            ldd _current_tcb_p
 C86A  C30002            addd #2
 C86D  FD800A            std _global_old_sp_p
 C870                  kernel.314::	
                       ; 
                       ;       // pick next task to run
                       ;       current_tcb_p=presto_next_tcb_to_run();
 C870  BDC941            jsr _presto_next_tcb_to_run
 C873  FD800E            std _current_tcb_p
 C876                  kernel.315::	
                       ;       current_tid=current_tcb_p->task_id;
 C876  18FE800E          ldy _current_tcb_p
 C87A  18E600            ldab 0,y
 C87D  F78010            stab _current_tid
 C880                  kernel.318::	
                       ; 
                       ;       // end of ISR will set up new stack
                       ;       global_new_sp=current_tcb_p->stack_ptr;
 C880  FC800E            ldd _current_tcb_p
 C883  C30002            addd #2
 C886  188F              xgdy
 C888  18EC00            ldd 0,y
 C88B  FD8008            std _global_new_sp
 C88E  18FE800A          ldy _global_old_sp_p
 C892  18AF00            sts 0,y
 C895  BE8008            lds _global_new_sp
 C898                  kernel.325::	
                       ; 
                       ;       // store the old stack pointer
                       ;       asm("ldy _global_old_sp_p");
                       ;       asm("sts 0,y");
                       ;       // load the new stack pointer
                       ;       asm("lds _global_new_sp");
                       ;    }
 C898                  L52:
 C898  3B                rti
 C899                  kernel.345::	
                       ; 
                       ; /*
                       ;    // Clear interrupt mask bit (to enable ints) in the CC register on the stack.
                       ;    // That way, the new task will have interrupts enabled when it wakes up.
                       ;    asm("pula");
                       ;    ENABLE_CCR_INTERRUPT_BIT;
                       ;    asm("psha");
                       ; */
                       ; 
                       ;    // The end of this function SHOULD be an RTI (instead of RTS), because it is
                       ;    // an interrupt.  But the ICC compiler adds a lot of stuff at the beginning
                       ;    // and the end of interrupt service routines.  Specifically, it is messing
                       ;    // with the X register (pushing it onto the stack) because it uses that as
                       ;    // a frame pointer.  So I will add my RTI here explicitly, to force the
                       ;    // behavior that I want.
                       ;    // Now we will pop the stack and "run" the new task.
                       ;    asm("rti");
                       ; 
                       ;    // we never get here
                       ;    presto_fatal_error();
 C899  BDC4B4            jsr _presto_fatal_error
 C89C                  kernel.346::	
                       ; }
 C89C                  L51:
 C89C  8F                xgdx
 C89D  C30008            addd #8
 C8A0  8F                xgdx
 C8A1  35                txs
 C8A2  38                pulx
 C8A3  39                rts
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;          ?temp -> 4,x
 C8A4                  _context_switch_wrapper::
 C8A4  BDCE72            jsr __enterb
 C8A7  06                .byte 0x6
 C8A8                  	_context_switch::
 C8A8                  kernel.357::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; void context_switch_wrapper(void) {
                       ; 
                       ;    asm("_context_switch::");
                       ; 
                       ;    // registers are pushed when SWI is executed
                       ; 
                       ;    // check to see if the old task has clobbered its stack
                       ;    if(((current_tcb_p->stack_ptr)>(current_tcb_p->stack_top))
 C8A8  FC800E            ldd _current_tcb_p
 C8AB  C30002            addd #2
 C8AE  188F              xgdy
 C8B0  18EC00            ldd 0,y
 C8B3  ED04              std 4,x
 C8B5  FC800E            ldd _current_tcb_p
 C8B8  C30004            addd #4
 C8BB  188F              xgdy
 C8BD  EC04              ldd 4,x
 C8BF  CDA300            cpd 0,y
 C8C2  220F              bhi L60
 C8C4  FC800E            ldd _current_tcb_p
 C8C7  C30006            addd #6
 C8CA  188F              xgdy
 C8CC  EC04              ldd 4,x
 C8CE  CDA300            cpd 0,y
 C8D1  2403              bhs L58
 C8D3                  L60:
 C8D3                  kernel.359::	
                       ;    ||((current_tcb_p->stack_ptr)<(current_tcb_p->stack_bottom)))
                       ;       presto_fatal_error();
 C8D3  BDC4B4            jsr _presto_fatal_error
 C8D6                  L58:
 C8D6                  kernel.362::	
                       ; 
                       ;    // the inline asm will save old SP in old TCB
                       ;    global_old_sp_p=&(current_tcb_p->stack_ptr);
 C8D6  FC800E            ldd _current_tcb_p
 C8D9  C30002            addd #2
 C8DC  FD800A            std _global_old_sp_p
 C8DF                  kernel.365::	
                       ; 
                       ;    // pick next task to run
                       ;    current_tcb_p=presto_next_tcb_to_run();
 C8DF  BDC941            jsr _presto_next_tcb_to_run
 C8E2  FD800E            std _current_tcb_p
 C8E5                  kernel.366::	
                       ;    current_tid=current_tcb_p->task_id;
 C8E5  18FE800E          ldy _current_tcb_p
 C8E9  18E600            ldab 0,y
 C8EC  F78010            stab _current_tid
 C8EF                  kernel.369::	
                       ; 
                       ;    // check to see if the new task has clobbered its stack
                       ;    if(((current_tcb_p->stack_ptr)>(current_tcb_p->stack_top))
 C8EF  FC800E            ldd _current_tcb_p
 C8F2  C30002            addd #2
 C8F5  188F              xgdy
 C8F7  18EC00            ldd 0,y
 C8FA  ED02              std 2,x
 C8FC  FC800E            ldd _current_tcb_p
 C8FF  C30004            addd #4
 C902  188F              xgdy
 C904  EC02              ldd 2,x
 C906  CDA300            cpd 0,y
 C909  220F              bhi L63
 C90B  FC800E            ldd _current_tcb_p
 C90E  C30006            addd #6
 C911  188F              xgdy
 C913  EC02              ldd 2,x
 C915  CDA300            cpd 0,y
 C918  2403              bhs L61
 C91A                  L63:
 C91A                  kernel.371::	
                       ;    ||((current_tcb_p->stack_ptr)<(current_tcb_p->stack_bottom)))
                       ;       presto_fatal_error();
 C91A  BDC4B4            jsr _presto_fatal_error
 C91D                  L61:
 C91D                  kernel.376::	
                       ; 
                       ;    // call asm routine to set up new stack
                       ;    // when we return, we'll be another process
                       ;    // the asm routine will re-enable interrupts
                       ;    global_new_sp=current_tcb_p->stack_ptr;
 C91D  FC800E            ldd _current_tcb_p
 C920  C30002            addd #2
 C923  188F              xgdy
 C925  18EC00            ldd 0,y
 C928  FD8008            std _global_new_sp
 C92B  18FE800A          ldy _global_old_sp_p
 C92F  18AF00            sts 0,y
 C932  BE8008            lds _global_new_sp
 C935  3B                rti
 C936                  kernel.410::	
                       ; 
                       ; /*
                       ;    // AIGH! - REGISTERS PUSHED A SECOND TIME HERE!!
                       ;    // save the registers (in the same order that an interrupt does)
                       ;    asm("pshy");  // 2 bytes (Low, then High)
                       ;    asm("pshx");  // 2 bytes (Low, then High)
                       ;    asm("psha");  // 1 byte
                       ;    asm("pshb");  // 1 byte
                       ;    asm("tpa");
                       ;    ENABLE_CCR_INTERRUPT_BIT;  // enable interrupts in pushed CC register
                       ;    asm("psha");  // 1 byte, the condition codes
                       ; */
                       ; 
                       ;    // store the old stack pointer
                       ;    asm("ldy _global_old_sp_p");
                       ;    asm("sts 0,y");
                       ;    // load the new stack pointer
                       ;    asm("lds _global_new_sp");
                       ; 
                       ; /*
                       ;    // Clear interrupt mask bit (to enable ints) in the CC register on the stack.
                       ;    // That way, the new task will have interrupts enabled when it wakes up.
                       ;    asm("pula");
                       ;    ENABLE_CCR_INTERRUPT_BIT;
                       ;    asm("psha");
                       ; */
                       ; 
                       ;    // Normally, this function would end with an RTS, but we want to act EXACTLY
                       ;    // the same as if we had just been inside of an interrupt.  So we manually
                       ;    // call RTI here to pop the registers and "run" the new task.
                       ;    asm("rti");
                       ; 
                       ;    // we never get here
                       ;    presto_fatal_error();
 C936  BDC4B4            jsr _presto_fatal_error
 C939                  kernel.411::	
                       ; }
 C939                  L57:
 C939  8F                xgdx
 C93A  C30006            addd #6
 C93D  8F                xgdx
 C93E  35                txs
 C93F  38                pulx
 C940  39                rts
                       ;  IX -> 0,x
                       ;            ptr -> 2,x
 C941                  _presto_next_tcb_to_run::
 C941  BDCE72            jsr __enterb
 C944  04                .byte 0x4
 C945                  kernel.420::	
                       ; 
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   S C H E D U L I N G
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; /*static*/ PRESTO_TCB_T * presto_next_tcb_to_run(void) {
                       ;    // pick highest priority ready task to run
                       ;    PRESTO_TCB_T * ptr=tcb_head_p;
 C945  FC8011            ldd _tcb_head_p
 C948  ED02              std 2,x
 C94A  2022              bra L66
 C94C                  L65:
 C94C                  kernel.422::	
                       ;    while(ptr!=NULL) {
                       ;       if(ptr->state==STATE_READY) return ptr;
 C94C  EC02              ldd 2,x
 C94E  C3000A            addd #10
 C951  188F              xgdy
 C953  18EC00            ldd 0,y
 C956  260A              bne L68
 C958  EC02              ldd 2,x
 C95A  8F                xgdx
 C95B  C30004            addd #4
 C95E  8F                xgdx
 C95F  35                txs
 C960  38                pulx
 C961  39                rts
 C962                  L68:
 C962                  kernel.423::	
                       ;       ptr=ptr->next;
 C962  EC02              ldd 2,x
 C964  C3000C            addd #12
 C967  188F              xgdy
 C969  18EC00            ldd 0,y
 C96C  ED02              std 2,x
 C96E                  kernel.424::	
                       ;    }
 C96E                  L66:
 C96E  EC02              ldd 2,x
 C970  26DA              bne L65
 C972                  kernel.426::	
                       ;    // should never get here
                       ;    presto_fatal_error();
 C972  BDC4B4            jsr _presto_fatal_error
 C975                  kernel.427::	
                       ;    return NULL;
 C975  CC0000            ldd #0
 C978  8F                xgdx
 C979  C30004            addd #4
 C97C  8F                xgdx
 C97D  35                txs
 C97E  38                pulx
 C97F  39                rts
 C980                  L64:
 C980  8F                xgdx
 C981  C30004            addd #4
 C984  8F                xgdx
 C985  35                txs
 C986  38                pulx
 C987  39                rts
                       ;  IX -> 0,x
                       ;          ?temp -> 2,x
                       ;        payload -> 12,x
                       ;             to -> 9,x
 C988                  _presto_send_message::
 C988  BDCE72            jsr __enterb
 C98B  46                .byte 0x46
 C98C                  kernel.435::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   M E S S A G E S   A N D   T I M E R S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; BYTE presto_send_message(PRESTO_TID_T to, PRESTO_MAIL_T payload) {
                       ;    return presto_timer(to,0,payload);
 C98C  EC00              ldd 0,x
 C98E  C30002            addd #2
 C991  1AEE0C            ldy 12,x
 C994  3C                pshx
 C995  8F                xgdx
 C996  CC0004            ldd #4
 C999  BDCF1B            jsr __asgnblk
 C99C  38                pulx
 C99D  EC00              ldd 0,x
 C99F  C30002            addd #2
 C9A2  37                pshb
 C9A3  36                psha
 C9A4  CC0000            ldd #0
 C9A7  37                pshb
 C9A8  36                psha
 C9A9  E609              ldab 9,x
 C9AB  4F                clra
 C9AC  5D                tstb
 C9AD  2A01              bpl X2
 C9AF  43                coma
 C9B0                  X2:
 C9B0  BDC9CC            jsr _presto_timer
 C9B3  1838              puly
 C9B5  1838              puly
 C9B7  4F                clra
 C9B8  8F                xgdx
 C9B9  C30006            addd #6
 C9BC  8F                xgdx
 C9BD  35                txs
 C9BE  38                pulx
 C9BF  1838              puly
 C9C1  39                rts
 C9C2                  L70:
 C9C2  8F                xgdx
 C9C3  C30006            addd #6
 C9C6  8F                xgdx
 C9C7  35                txs
 C9C8  38                pulx
 C9C9  1838              puly
 C9CB  39                rts
                       ;  IX -> 0,x
                       ;  func temp: 2,x - 6,x
                       ;          ?temp -> 6,x
                       ;          ?temp -> 10,x
                       ;          msg_p -> 14,x
                       ;          ?temp -> 16,x
                       ;          ?temp -> 20,x
                       ;          ?temp -> 24,x
                       ;          ?temp -> 28,x
                       ;        tcb_ptr -> 32,x
                       ;     new_mail_p -> 34,x
                       ;        payload -> 44,x
                       ;          delay -> 42,x
                       ;             to -> 39,x
 C9CC                  _presto_timer::
 C9CC  BDCE72            jsr __enterb
 C9CF  64                .byte 0x64
 C9D0  0F                    sei
 C9D1                  kernel.448::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; BYTE presto_timer(PRESTO_TID_T to, unsigned short delay, PRESTO_MAIL_T payload) {
                       ;    PRESTO_MESSAGE_T * new_mail_p;
                       ;    PRESTO_TCB_T * tcb_ptr;
                       ; 
                       ;    // we're going to mess with the PO mail list... interrupts off
                       ;    INTR_OFF();
                       ; 
                       ;    // check to see if there's room
                       ;    if(free_mail_p==NULL) {
 C9D1  FC8016            ldd _free_mail_p
 C9D4  2603              bne L72
 C9D6                  kernel.449::	
                       ;       presto_fatal_error();
 C9D6  BDC4B4            jsr _presto_fatal_error
 C9D9                  kernel.450::	
                       ;    }
 C9D9                  L72:
 C9D9                  kernel.453::	
                       ; 
                       ;    // check to see that the recipient is an alive task
                       ;    tcb_ptr=tid_to_tcbptr(to);
 C9D9  E627              ldab 39,x
 C9DB  4F                clra
 C9DC  5D                tstb
 C9DD  2A01              bpl X3
 C9DF  43                coma
 C9E0                  X3:
 C9E0  4F                clra
 C9E1  BDCD5E            jsr _tid_to_tcbptr
 C9E4  ED20              std 32,x
 C9E6                  kernel.454::	
                       ;    if(tcb_ptr==NULL) {
 C9E6  EC20              ldd 32,x
 C9E8  2603              bne L74
 C9EA                  kernel.455::	
                       ;       presto_fatal_error();
 C9EA  BDC4B4            jsr _presto_fatal_error
 C9ED                  kernel.456::	
                       ;    }
 C9ED                  L74:
 C9ED                  kernel.459::	
                       ; 
                       ;    // allocate space for a new message
                       ;    new_mail_p=free_mail_p;
 C9ED  FC8016            ldd _free_mail_p
 C9F0  ED22              std 34,x
 C9F2                  kernel.460::	
                       ;    free_mail_p=free_mail_p->next;
 C9F2  FC8016            ldd _free_mail_p
 C9F5  C3000E            addd #14
 C9F8  188F              xgdy
 C9FA  18EC00            ldd 0,y
 C9FD  FD8016            std _free_mail_p
 CA00                  kernel.464::	
                       ; 
                       ;    // fill in the blanks
                       ;    // new_mail_p->serial_number;   already set
                       ;    new_mail_p->from_tid=current_tcb_p->task_id;
 CA00  EC22              ldd 34,x
 CA02  C30002            addd #2
 CA05  188F              xgdy
 CA07  183C              pshy ; spill
 CA09  18FE800E          ldy _current_tcb_p
 CA0D  18E600            ldab 0,y
 CA10  1838              puly ; reload
 CA12  18E700            stab 0,y
 CA15                  kernel.465::	
                       ;    new_mail_p->to_tcb_p=tcb_ptr;
 CA15  EC22              ldd 34,x
 CA17  C30004            addd #4
 CA1A  188F              xgdy
 CA1C  EC20              ldd 32,x
 CA1E  18ED00            std 0,y
 CA21                  kernel.466::	
                       ;    new_mail_p->delivery_time=clock_add(presto_master_clock,delay);
 CA21  EC2A              ldd 42,x
 CA23  37                pshb
 CA24  36                psha
 CA25  EC00              ldd 0,x
 CA27  C3001C            addd #28
 CA2A  18CE9D75          ldy #_presto_master_clock
 CA2E  3C                pshx
 CA2F  8F                xgdx
 CA30  CC0004            ldd #4
 CA33  BDCF1B            jsr __asgnblk
 CA36  38                pulx
 CA37  EC00              ldd 0,x
 CA39  C3001C            addd #28
 CA3C  37                pshb
 CA3D  36                psha
 CA3E  EC00              ldd 0,x
 CA40  C30018            addd #24
 CA43  BDC2CD            jsr _clock_add
 CA46  1838              puly
 CA48  1838              puly
 CA4A  EC00              ldd 0,x
 CA4C  C30018            addd #24
 CA4F  188F              xgdy
 CA51  EC22              ldd 34,x
 CA53  C30006            addd #6
 CA56  3C                pshx
 CA57  8F                xgdx
 CA58  CC0004            ldd #4
 CA5B  BDCF1B            jsr __asgnblk
 CA5E  38                pulx
 CA5F                  kernel.467::	
                       ;    new_mail_p->payload=payload;
 CA5F  EC22              ldd 34,x
 CA61  C3000A            addd #10
 CA64  1AEE2C            ldy 44,x
 CA67  3C                pshx
 CA68  8F                xgdx
 CA69  CC0004            ldd #4
 CA6C  BDCF1B            jsr __asgnblk
 CA6F  38                pulx
 CA70                  kernel.470::	
                       ; 
                       ;    // insert new message into list in time order
                       ;    if(po_mail_p==NULL) {
 CA70  FC8018            ldd _po_mail_p
 CA73  2615              bne L76
 CA75                  kernel.473::	
                       ; 
                       ;       // we are the first message in PO
                       ;       po_mail_p=new_mail_p;
 CA75  EC22              ldd 34,x
 CA77  FD8018            std _po_mail_p
 CA7A                  kernel.474::	
                       ;       new_mail_p->next=NULL;
 CA7A  EC22              ldd 34,x
 CA7C  C3000E            addd #14
 CA7F  188F              xgdy
 CA81  CC0000            ldd #0
 CA84  18ED00            std 0,y
 CA87                  kernel.476::	
                       ; 
                       ;    } else if(clock_compare(po_mail_p->delivery_time,new_mail_p->delivery_time)>0) {
 CA87  7ECB7E            jmp L77
 CA8A                  L76:
 CA8A  EC00              ldd 0,x
 CA8C  C30014            addd #20
 CA8F  37                pshb ; 
 CA90  36                psha ; spill
 CA91  EC22              ldd 34,x
 CA93  C30006            addd #6
 CA96  188F              xgdy
 CA98  32                pula ; 
 CA99  33                pulb ; reload
 CA9A  3C                pshx
 CA9B  8F                xgdx
 CA9C  CC0004            ldd #4
 CA9F  BDCF1B            jsr __asgnblk
 CAA2  38                pulx
 CAA3  EC00              ldd 0,x
 CAA5  C30014            addd #20
 CAA8  37                pshb
 CAA9  36                psha
 CAAA  EC00              ldd 0,x
 CAAC  C30010            addd #16
 CAAF  37                pshb ; 
 CAB0  36                psha ; spill
 CAB1  FC8018            ldd _po_mail_p
 CAB4  C30006            addd #6
 CAB7  188F              xgdy
 CAB9  32                pula ; 
 CABA  33                pulb ; reload
 CABB  3C                pshx
 CABC  8F                xgdx
 CABD  CC0004            ldd #4
 CAC0  BDCF1B            jsr __asgnblk
 CAC3  38                pulx
 CAC4  EC00              ldd 0,x
 CAC6  C30010            addd #16
 CAC9  BDC31C            jsr _clock_compare
 CACC  1838              puly
 CACE  ED02              std 2,x
 CAD0  6D03              tst 3,x
 CAD2  2F15              ble L78
 CAD4                  kernel.479::	
                       ; 
                       ;       // advance to the head of the class!
                       ;       new_mail_p->next=po_mail_p;
 CAD4  EC22              ldd 34,x
 CAD6  C3000E            addd #14
 CAD9  188F              xgdy
 CADB  FC8018            ldd _po_mail_p
 CADE  18ED00            std 0,y
 CAE1                  kernel.480::	
                       ;       po_mail_p=new_mail_p;
 CAE1  EC22              ldd 34,x
 CAE3  FD8018            std _po_mail_p
 CAE6                  kernel.482::	
                       ; 
                       ;    } else {
 CAE6  7ECB7E            jmp L79
 CAE9                  L78:
 CAE9                  kernel.485::	
                       ; 
                       ;       // we are one of many messages in the PO
                       ;       PRESTO_MESSAGE_T * msg_p=po_mail_p;
 CAE9  FC8018            ldd _po_mail_p
 CAEC  ED0E              std 14,x
 CAEE  205B              bra L81
 CAF0                  L80:
 CAF0                  kernel.487::	
                       ;       while(msg_p->next!=NULL) {
                       ;          if(clock_compare(msg_p->next->delivery_time,new_mail_p->delivery_time)>0) break;
 CAF0  EC00              ldd 0,x
 CAF2  C3000A            addd #10
 CAF5  37                pshb ; 
 CAF6  36                psha ; spill
 CAF7  EC22              ldd 34,x
 CAF9  C30006            addd #6
 CAFC  188F              xgdy
 CAFE  32                pula ; 
 CAFF  33                pulb ; reload
 CB00  3C                pshx
 CB01  8F                xgdx
 CB02  CC0004            ldd #4
 CB05  BDCF1B            jsr __asgnblk
 CB08  38                pulx
 CB09  EC00              ldd 0,x
 CB0B  C3000A            addd #10
 CB0E  37                pshb
 CB0F  36                psha
 CB10  EC0E              ldd 14,x
 CB12  C3000E            addd #14
 CB15  188F              xgdy
 CB17  18EC00            ldd 0,y
 CB1A  C30006            addd #6
 CB1D  188F              xgdy
 CB1F  EC00              ldd 0,x
 CB21  C30006            addd #6
 CB24  3C                pshx
 CB25  8F                xgdx
 CB26  CC0004            ldd #4
 CB29  BDCF1B            jsr __asgnblk
 CB2C  38                pulx
 CB2D  EC00              ldd 0,x
 CB2F  C30006            addd #6
 CB32  BDC31C            jsr _clock_compare
 CB35  1838              puly
 CB37  ED04              std 4,x
 CB39  6D05              tst 5,x
 CB3B  2F02              ble L83
 CB3D  201B              bra L82
 CB3F                  L83:
 CB3F                  kernel.488::	
                       ;          msg_p=msg_p->next;
 CB3F  EC0E              ldd 14,x
 CB41  C3000E            addd #14
 CB44  188F              xgdy
 CB46  18EC00            ldd 0,y
 CB49  ED0E              std 14,x
 CB4B                  kernel.489::	
                       ;       }
 CB4B                  L81:
 CB4B  EC0E              ldd 14,x
 CB4D  C3000E            addd #14
 CB50  188F              xgdy
 CB52  18EC00            ldd 0,y
 CB55  2703              beq X4
 CB57  7ECAF0            jmp L80
 CB5A                  X4:
 CB5A                  L82:
 CB5A                  kernel.493::	
                       ; 
                       ;       // msg_p->next is either NULL or later delivery time than us
                       ;       // either way, we want to get inserted between msg_p and msg_p->next
                       ;       new_mail_p->next=msg_p->next;
 CB5A  EC0E              ldd 14,x
 CB5C  C3000E            addd #14
 CB5F  188F              xgdy
 CB61  18EC00            ldd 0,y
 CB64  37                pshb ; 
 CB65  36                psha ; spill
 CB66  EC22              ldd 34,x
 CB68  C3000E            addd #14
 CB6B  188F              xgdy
 CB6D  32                pula ; 
 CB6E  33                pulb ; reload
 CB6F  18ED00            std 0,y
 CB72                  kernel.494::	
                       ;       msg_p->next=new_mail_p;
 CB72  EC0E              ldd 14,x
 CB74  C3000E            addd #14
 CB77  188F              xgdy
 CB79  EC22              ldd 34,x
 CB7B  18ED00            std 0,y
 CB7E                  kernel.495::	
                       ;    }
 CB7E                  L79:
 CB7E                  L77:
 CB7E  0E                    cli
 CB7F                  kernel.500::	
                       ; 
                       ;    // we're done messing with the PO mail list... interrupts back on
                       ;    INTR_ON();
                       ; 
                       ;    return 0;
 CB7F  CC0000            ldd #0
 CB82  8F                xgdx
 CB83  C30024            addd #36
 CB86  8F                xgdx
 CB87  35                txs
 CB88  38                pulx
 CB89  1838              puly
 CB8B  39                rts
 CB8C                  L71:
 CB8C  8F                xgdx
 CB8D  C30024            addd #36
 CB90  8F                xgdx
 CB91  35                txs
 CB92  38                pulx
 CB93  1838              puly
 CB95  39                rts
                       ;  IX -> 0,x
                       ;          msg_p -> 2,x
                       ;      payload_p -> 6,x
 CB96                  _presto_wait_for_message::
 CB96  BDCE72            jsr __enterb
 CB99  44                .byte 0x44
 CB9A  0F                    sei
 CB9B                  kernel.512::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; BYTE presto_wait_for_message(PRESTO_MAIL_T * payload_p) {
                       ;    PRESTO_MESSAGE_T * msg_p;
                       ; 
                       ;    // we're about to switch to a new task... interrupts off
                       ;    INTR_OFF();
                       ; 
                       ;    // we will only sleep if there are no messages in our queue
                       ;    if(current_tcb_p->mailbox_head==NULL) {
 CB9B  FC800E            ldd _current_tcb_p
 CB9E  C3000E            addd #14
 CBA1  188F              xgdy
 CBA3  18EC00            ldd 0,y
 CBA6  260F              bne L86
 CBA8                  kernel.514::	
                       ;       // no mail, so we can sleep
                       ;       current_tcb_p->state=STATE_BLOCKED;
 CBA8  FC800E            ldd _current_tcb_p
 CBAB  C3000A            addd #10
 CBAE  188F              xgdy
 CBB0  CC0001            ldd #1
 CBB3  18ED00            std 0,y
 CBB6  3F                swi
 CBB7                  kernel.518::	
                       ;       asm("swi");
                       ;       // When we wake up, we'll be ready to recieve our mail.
                       ;       // Interrupts will be enabled.
                       ;    }
 CBB7                  L86:
 CBB7  0F                    sei
 CBB8                  kernel.523::	
                       ; 
                       ;    // we're about to mess with the mail list... interrupts off
                       ;    INTR_OFF();
                       ;    // we're going to use this a lot, so dereference now
                       ;    msg_p=current_tcb_p->mailbox_head;
 CBB8  FC800E            ldd _current_tcb_p
 CBBB  C3000E            addd #14
 CBBE  188F              xgdy
 CBC0  18EC00            ldd 0,y
 CBC3  ED02              std 2,x
 CBC5                  kernel.528::	
                       ; 
                       ;    // AIGH! - this is where the error happens
                       ; 
                       ;    // get one message from the task's mail queue
                       ;    if(msg_p==NULL) {
 CBC5  EC02              ldd 2,x
 CBC7  2603              bne L88
 CBC9                  kernel.530::	
                       ;       // there are no messages in the task's mail list
                       ;       presto_fatal_error();
 CBC9  BDC4B4            jsr _presto_fatal_error
 CBCC                  kernel.531::	
                       ;    }
 CBCC                  L88:
 CBCC                  kernel.534::	
                       ; 
                       ;    // are we being paranoid?
                       ;    if((msg_p->to_tcb_p)!=current_tcb_p) {
 CBCC  EC02              ldd 2,x
 CBCE  C30004            addd #4
 CBD1  188F              xgdy
 CBD3  18EC00            ldd 0,y
 CBD6  1AB3800E          cpd _current_tcb_p
 CBDA  2703              beq L90
 CBDC                  kernel.535::	
                       ;       presto_fatal_error();
 CBDC  BDC4B4            jsr _presto_fatal_error
 CBDF                  kernel.536::	
                       ;    }
 CBDF                  L90:
 CBDF                  kernel.539::	
                       ; 
                       ;    // there is at least one message, get one
                       ;    if (msg_p==current_tcb_p->mailbox_tail) {
 CBDF  FC800E            ldd _current_tcb_p
 CBE2  C30010            addd #16
 CBE5  188F              xgdy
 CBE7  EC02              ldd 2,x
 CBE9  CDA300            cpd 0,y
 CBEC  261E              bne L92
 CBEE                  kernel.541::	
                       ;       // there is only one item in the list, take it
                       ;       current_tcb_p->mailbox_head=NULL;
 CBEE  FC800E            ldd _current_tcb_p
 CBF1  C3000E            addd #14
 CBF4  188F              xgdy
 CBF6  CC0000            ldd #0
 CBF9  18ED00            std 0,y
 CBFC                  kernel.542::	
                       ;       current_tcb_p->mailbox_tail=NULL;
 CBFC  FC800E            ldd _current_tcb_p
 CBFF  C30010            addd #16
 CC02  188F              xgdy
 CC04  CC0000            ldd #0
 CC07  18ED00            std 0,y
 CC0A                  kernel.543::	
                       ;    } else {
 CC0A  2019              bra L93
 CC0C                  L92:
 CC0C                  kernel.545::	
                       ;       // there are many messages, take first
                       ;       current_tcb_p->mailbox_head=msg_p->next;
 CC0C  EC02              ldd 2,x
 CC0E  C3000E            addd #14
 CC11  188F              xgdy
 CC13  18EC00            ldd 0,y
 CC16  37                pshb ; 
 CC17  36                psha ; spill
 CC18  FC800E            ldd _current_tcb_p
 CC1B  C3000E            addd #14
 CC1E  188F              xgdy
 CC20  32                pula ; 
 CC21  33                pulb ; reload
 CC22  18ED00            std 0,y
 CC25                  kernel.546::	
                       ;    }
 CC25                  L93:
 CC25                  kernel.549::	
                       ; 
                       ;    // record the message id before we can get interrupted
                       ;    if(payload_p!=NULL) *payload_p=msg_p->payload;
 CC25  EC06              ldd 6,x
 CC27  2712              beq L94
 CC29  EC02              ldd 2,x
 CC2B  C3000A            addd #10
 CC2E  188F              xgdy
 CC30  EC06              ldd 6,x
 CC32  3C                pshx
 CC33  8F                xgdx
 CC34  CC0004            ldd #4
 CC37  BDCF1B            jsr __asgnblk
 CC3A  38                pulx
 CC3B                  L94:
 CC3B                  kernel.552::	
                       ; 
                       ;    // return the message to the free list
                       ;    msg_p->next=free_mail_p;
 CC3B  EC02              ldd 2,x
 CC3D  C3000E            addd #14
 CC40  188F              xgdy
 CC42  FC8016            ldd _free_mail_p
 CC45  18ED00            std 0,y
 CC48                  kernel.553::	
                       ;    free_mail_p=msg_p;
 CC48  EC02              ldd 2,x
 CC4A  FD8016            std _free_mail_p
 CC4D  0E                    cli
 CC4E                  kernel.559::	
                       ; 
                       ;    // done messing with mail lists... interrupts back on
                       ;    INTR_ON();
                       ; 
                       ;    // return the number of messages retrieved
                       ;    return 1;
 CC4E  CC0001            ldd #1
 CC51  8F                xgdx
 CC52  C30004            addd #4
 CC55  8F                xgdx
 CC56  35                txs
 CC57  38                pulx
 CC58  1838              puly
 CC5A  39                rts
 CC5B                  L85:
 CC5B  8F                xgdx
 CC5C  C30004            addd #4
 CC5F  8F                xgdx
 CC60  35                txs
 CC61  38                pulx
 CC62  1838              puly
 CC64  39                rts
                       ;  IX -> 0,x
                       ;  func temp: 2,x - 4,x
                       ;          ?temp -> 4,x
                       ;          ?temp -> 8,x
                       ;          count -> 13,x
                       ;          msg_p -> 14,x
                       ;          tcb_p -> 16,x
 CC65                  _deliver_mail::
 CC65  BDCE72            jsr __enterb
 CC68  12                .byte 0x12
 CC69                  kernel.565::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; /*static*/ BYTE deliver_mail(void) {
                       ;    BYTE count=0;
 CC69  6F0D              clr 13,x
 CC6B  7ECCFD            jmp L98
 CC6E                  L97:
 CC6E                  kernel.570::	
                       ;    PRESTO_MESSAGE_T * msg_p;
                       ;    PRESTO_TCB_T * tcb_p;
                       ;    while((po_mail_p!=NULL)&&(clock_compare(po_mail_p->delivery_time,presto_master_clock)<=0)) {
                       ;       // we're going to use this a lot, so de-reference once
                       ;       tcb_p=po_mail_p->to_tcb_p;
 CC6E  FC8018            ldd _po_mail_p
 CC71  C30004            addd #4
 CC74  188F              xgdy
 CC76  18EC00            ldd 0,y
 CC79  ED10              std 16,x
 CC7B                  kernel.571::	
                       ;       if(tcb_p==NULL) presto_fatal_error();
 CC7B  EC10              ldd 16,x
 CC7D  2603              bne L100
 CC7F  BDC4B4            jsr _presto_fatal_error
 CC82                  L100:
 CC82                  kernel.574::	
                       ; 
                       ;       // make receiver task ready
                       ;       tcb_p->state=STATE_READY;
 CC82  EC10              ldd 16,x
 CC84  C3000A            addd #10
 CC87  188F              xgdy
 CC89  CC0000            ldd #0
 CC8C  18ED00            std 0,y
 CC8F                  kernel.577::	
                       ; 
                       ;       // remove message from PO list
                       ;       msg_p=po_mail_p;                      // we know that po_mail_p!=NULL
 CC8F  FC8018            ldd _po_mail_p
 CC92  ED0E              std 14,x
 CC94                  kernel.578::	
                       ;       po_mail_p=po_mail_p->next;
 CC94  FC8018            ldd _po_mail_p
 CC97  C3000E            addd #14
 CC9A  188F              xgdy
 CC9C  18EC00            ldd 0,y
 CC9F  FD8018            std _po_mail_p
 CCA2                  kernel.581::	
                       ; 
                       ;       // move the message to the task's mail list
                       ;       if(tcb_p->mailbox_head==NULL) {
 CCA2  EC10              ldd 16,x
 CCA4  C3000E            addd #14
 CCA7  188F              xgdy
 CCA9  18EC00            ldd 0,y
 CCAC  261A              bne L102
 CCAE                  kernel.584::	
                       ; 
                       ;          // we are the only message in the list
                       ;          tcb_p->mailbox_head=msg_p;
 CCAE  EC10              ldd 16,x
 CCB0  C3000E            addd #14
 CCB3  188F              xgdy
 CCB5  EC0E              ldd 14,x
 CCB7  18ED00            std 0,y
 CCBA                  kernel.585::	
                       ;          tcb_p->mailbox_tail=msg_p;
 CCBA  EC10              ldd 16,x
 CCBC  C30010            addd #16
 CCBF  188F              xgdy
 CCC1  EC0E              ldd 14,x
 CCC3  18ED00            std 0,y
 CCC6                  kernel.587::	
                       ; 
                       ;       } else {
 CCC6  2020              bra L103
 CCC8                  L102:
 CCC8                  kernel.590::	
                       ; 
                       ;          // we are one of many, add to the tail of the list
                       ;          tcb_p->mailbox_tail->next=msg_p;
 CCC8  EC10              ldd 16,x
 CCCA  C30010            addd #16
 CCCD  188F              xgdy
 CCCF  18EC00            ldd 0,y
 CCD2  C3000E            addd #14
 CCD5  188F              xgdy
 CCD7  EC0E              ldd 14,x
 CCD9  18ED00            std 0,y
 CCDC                  kernel.591::	
                       ;          tcb_p->mailbox_tail=msg_p;
 CCDC  EC10              ldd 16,x
 CCDE  C30010            addd #16
 CCE1  188F              xgdy
 CCE3  EC0E              ldd 14,x
 CCE5  18ED00            std 0,y
 CCE8                  kernel.593::	
                       ; 
                       ;       }
 CCE8                  L103:
 CCE8                  kernel.595::	
                       ;       // no matter what, we are the last in the task's message list
                       ;       msg_p->next=NULL;
 CCE8  EC0E              ldd 14,x
 CCEA  C3000E            addd #14
 CCED  188F              xgdy
 CCEF  CC0000            ldd #0
 CCF2  18ED00            std 0,y
 CCF5                  kernel.598::	
                       ; 
                       ;       // indicate that we moved one mail message
                       ;       count++;
 CCF5  E60D              ldab 13,x
 CCF7  4F                clra
 CCF8  C30001            addd #1
 CCFB  E70D              stab 13,x
 CCFD                  kernel.599::	
                       ;    }
 CCFD                  L98:
 CCFD  FC8018            ldd _po_mail_p
 CD00  2746              beq L104
 CD02  EC00              ldd 0,x
 CD04  C30008            addd #8
 CD07  18CE9D75          ldy #_presto_master_clock
 CD0B  3C                pshx
 CD0C  8F                xgdx
 CD0D  CC0004            ldd #4
 CD10  BDCF1B            jsr __asgnblk
 CD13  38                pulx
 CD14  EC00              ldd 0,x
 CD16  C30008            addd #8
 CD19  37                pshb
 CD1A  36                psha
 CD1B  EC00              ldd 0,x
 CD1D  C30004            addd #4
 CD20  37                pshb ; 
 CD21  36                psha ; spill
 CD22  FC8018            ldd _po_mail_p
 CD25  C30006            addd #6
 CD28  188F              xgdy
 CD2A  32                pula ; 
 CD2B  33                pulb ; reload
 CD2C  3C                pshx
 CD2D  8F                xgdx
 CD2E  CC0004            ldd #4
 CD31  BDCF1B            jsr __asgnblk
 CD34  38                pulx
 CD35  EC00              ldd 0,x
 CD37  C30004            addd #4
 CD3A  BDC31C            jsr _clock_compare
 CD3D  1838              puly
 CD3F  ED02              std 2,x
 CD41  6D03              tst 3,x
 CD43  2E03              bgt X5
 CD45  7ECC6E            jmp L97
 CD48                  X5:
 CD48                  L104:
 CD48                  kernel.600::	
                       ;    return count;
 CD48  E60D              ldab 13,x
 CD4A  4F                clra
 CD4B  8F                xgdx
 CD4C  C30012            addd #18
 CD4F  8F                xgdx
 CD50  35                txs
 CD51  38                pulx
 CD52  39                rts
 CD53                  L96:
 CD53  8F                xgdx
 CD54  C30012            addd #18
 CD57  8F                xgdx
 CD58  35                txs
 CD59  38                pulx
 CD5A  39                rts
                       ;  IX -> 0,x
 CD5B                  _idle_task::
 CD5B                  kernel.607::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   I D L E   T A S K
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; /*static*/ void idle_task(void) {
 CD5B                  L106:
 CD5B                  kernel.610::	
                       ;    while(1) {
                       ;       // do nothing
                       ;    }
 CD5B                  L107:
 CD5B  20FE              bra L106
 CD5D                  L105:
 CD5D  39                rts
                       ;  IX -> 0,x
                       ;            tid -> 5,x
 CD5E                  _tid_to_tcbptr::
 CD5E  37                pshb
 CD5F  36                psha
 CD60  3C                pshx
 CD61  30                tsx
 CD62  3C                pshx
 CD63  30                tsx
 CD64  EC04              ldd 4,x
 CD66  E705              stab 5,x
 CD68                  kernel.618::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   U T I L I T I E S
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; /*static*/ PRESTO_TCB_T * tid_to_tcbptr(BYTE tid) {
                       ;    if(tid>=MAX_TASKS) presto_fatal_error();
 CD68  E605              ldab 5,x
 CD6A  C106              cmpb #6
 CD6C  2503              blo L110
 CD6E  BDC4B4            jsr _presto_fatal_error
 CD71                  L110:
 CD71                  kernel.619::	
                       ;    if(tcb_list[tid].state==STATE_INACTIVE) return NULL;
 CD71  E605              ldab 5,x
 CD73  4F                clra
 CD74  188F              xgdy
 CD76  CC0012            ldd #18
 CD79  BDCE13            jsr __muli
 CD7C  C39D83            addd #_tcb_list+10
 CD7F  188F              xgdy
 CD81  18EC00            ldd 0,y
 CD84  1A830002          cpd #2
 CD88  260D              bne L112
 CD8A  CC0000            ldd #0
 CD8D  8F                xgdx
 CD8E  C30002            addd #2
 CD91  8F                xgdx
 CD92  35                txs
 CD93  38                pulx
 CD94  1838              puly
 CD96  39                rts
 CD97                  L112:
 CD97                  kernel.620::	
                       ;    return &tcb_list[tid];
 CD97  E605              ldab 5,x
 CD99  4F                clra
 CD9A  188F              xgdy
 CD9C  CC0012            ldd #18
 CD9F  BDCE13            jsr __muli
 CDA2  C39D79            addd #_tcb_list
 CDA5  8F                xgdx
 CDA6  C30002            addd #2
 CDA9  8F                xgdx
 CDAA  35                txs
 CDAB  38                pulx
 CDAC  1838              puly
 CDAE  39                rts
 CDAF                  L109:
 CDAF  8F                xgdx
 CDB0  C30002            addd #2
 CDB3  8F                xgdx
 CDB4  35                txs
 CDB5  38                pulx
 CDB6  1838              puly
 CDB8  39                rts
                       ;  IX -> 0,x
                       ;  rMEM -> 2,x
 CDB9                  _presto_start_master_timer::
 CDB9  BDCE72            jsr __enterb
 CDBC  04                .byte 0x4
 CDBD                  kernel.629::	
                       ; }
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; //   H A R D W A R E   T I M E R / C O U N T E R
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; /*static*/ void presto_start_master_timer(void) {
                       ;    // store (current plus CYCLES_PER_TICK)
                       ;    TOC2 = TCNT + CYCLES_PER_TICK;
 CDBD  CC07D0            ldd #2000
 CDC0  18CE0064          ldy #100
 CDC4  BDCE13            jsr __muli
 CDC7  ED02              std 2,x
 CDC9  FC100E            ldd 0x100e ; vol
 CDCC  E302              addd 2,x
 CDCE  FD1018            std 0x1018
 CDD1                  kernel.631::	
                       ;    // request output compare interrupt
                       ;    TMSK1 |= TMSK1_OC2I;
 CDD1  18CE1022          ldy #0x1022
 CDD5  181C0040          bset 0,y,#64
 CDD9                  kernel.634::	
                       ;    // clear the OUTPUT COMPARE flag
                       ;    // writing O's makes no change, writing 1's clears the bit
                       ;    TFLG1 = TFLG1_OC2F;
 CDD9  C640              ldab #64
 CDDB  F71023            stab 0x1023
 CDDE                  kernel.636::	
                       ;    // counter disconnected from output pin logic
                       ;    TCTL1 &= ~(TCTL1_OM2|TCTL1_OL2);
 CDDE  18CE1020          ldy #0x1020
 CDE2  181D00C0          bclr 0,y,~#-193
 CDE6                  kernel.637::	
                       ; }
 CDE6                  L115:
 CDE6  8F                xgdx
 CDE7  C30004            addd #4
 CDEA  8F                xgdx
 CDEB  35                txs
 CDEC  38                pulx
 CDED  39                rts
                       ;  IX -> 0,x
                       ;  rMEM -> 2,x
 CDEE                  _presto_restart_master_timer::
 CDEE  BDCE72            jsr __enterb
 CDF1  04                .byte 0x4
 CDF2                  kernel.643::	
                       ; 
                       ; ////////////////////////////////////////////////////////////////////////////////
                       ; 
                       ; /*static*/ void presto_restart_master_timer(void) {
                       ;    // store (last plus CYCLES_PER_TICK)
                       ;    TOC2 = TOC2 + CYCLES_PER_TICK;
 CDF2  CC07D0            ldd #2000
 CDF5  18CE0064          ldy #100
 CDF9  BDCE13            jsr __muli
 CDFC  ED02              std 2,x
 CDFE  FC1018            ldd 0x1018 ; vol
 CE01  E302              addd 2,x
 CE03  FD1018            std 0x1018
 CE06                  kernel.646::	
                       ;    // clear the OUTPUT COMPARE flag
                       ;    // writing O's makes no change, writing 1's clears the bit
                       ;    TFLG1 = TFLG1_OC2F;
 CE06  C640              ldab #64
 CE08  F71023            stab 0x1023
 CE0B                  kernel.647::	
                       ; }
 CE0B                  L116:
 CE0B  8F                xgdx
 CE0C  C30004            addd #4
 CE0F  8F                xgdx
 CE10  35                txs
 CE11  38                pulx
 CE12  39                rts
                         .area bss
 9C00                  _mail_list::
 9C00                    .blkb 320
 9D40                  _idle_tid::
 9D40                    .blkb 1
 9D41                  _idle_tcb_p::
 9D41                    .blkb 2
 9D43                  _idle_stack::
 9D43                    .blkb 50
 9D75                  _presto_master_clock::
 9D75                    .blkb 4
 9D79                  _tcb_list::
 9D79                    .blkb 108
 9DE5                  _global_save_sp::
 9DE5                    .blkb 2
