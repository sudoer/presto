ASxxxx Assembler V02.01 MSOE  (Motorola 6811), page 1.



                              1 
o  0000                       2 .data
   0000                       3    _presto_asm_save_sp:
   0000                       4    .blkw 1
                              5 .area idata
   0000 00 00                 6    .word 0    ; _presto_asm_save_sp
                              7 .area text
                              8 
                              9 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             10 
                    0010     11 CCR_INTERRUPT=0x10
                    1008     12 ISR_LED_PORT=0x1008       ; PORTD
                    0010     13 ISR_LED_MASK=0x10         ; PIN4
                             14 
                             15 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             16 
   0000                      17 _presto_system_isr::
                             18 ; uses global presto_asm_old_sp_p
                             19 ; uses global presto_asm_new_sp
                             20 ; uses global presto_asm_swap
                             21 
                             22    ; turn off interrupts
   0000 0F                   23    sei
                             24    ; LED on
                             25 ;  ldaa  ISR_LED_PORT
                             26 ;  anda  ~#ISR_LED_MASK
                             27 ;  staa  ISR_LED_PORT
                             28    ; increment clock, check if we need to pre-empt
   0001 BD 00 00             29    jsr   _presto_service_timer_interrupt
                             30    ; check to see if we need to switch tasks
   0004 7D 00 00             31    tst   _presto_asm_swap
   0007 27 08                32    beq   psi_rti
                             33    ; toggle the speaker
                             34 ;  ldaa  $1000
                             35 ;  eora  #$08
                             36 ;  staa  $1000
                             37   ; swap the stack pointers
   0009 FE 00 00             38    ldx   _presto_asm_old_sp_p
   000C AF 00                39    sts   0,x
   000E BE 00 00             40    lds   _presto_asm_new_sp
   0011                      41 psi_rti:
                             42    ; clear interrupt mask bit (enable ints) in the CC register on the stack
   0011 32                   43    pula
   0012 B4 FF EF             44    anda  ~#CCR_INTERRUPT
   0015 36                   45    psha
                             46    ; LED off
                             47 ;  ldaa  ISR_LED_PORT
                             48 ;  oraa  ISR_LED_MASK
                             49 ;  staa  ISR_LED_PORT
                             50    ; "run" new task
   0016 3B                   51    rti
                             52 
                             53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             54 
   0017                      55 _presto_switch_tasks::
                             56 ; uses global presto_asm_old_sp_p
ASxxxx Assembler V02.01 MSOE  (Motorola 6811), page 2.



                             57 ; uses global presto_asm_new_sp
                             58 
                             59    ; LED on
                             60 ;  ldaa  ISR_LED_PORT
                             61 ;  anda  ~#ISR_LED_MASK
                             62 ;  staa  ISR_LED_PORT
                             63    ; save the registers (in the same order that an interrupt does)
   0017 18 3C                64    pshy
   0019 3C                   65    pshx
   001A 36                   66    psha
   001B 37                   67    pshb
   001C 07                   68    tpa
   001D B4 FF EF             69    anda  ~#CCR_INTERRUPT     ; enable interrupts in pushed CC register
   0020 36                   70    psha
                             71    ; swap the stack pointers
   0021 FE 00 00             72    ldx   _presto_asm_old_sp_p
   0024 AF 00                73    sts   0,x
                             74    ; fall through to the "half-function" below
   0026                      75 _presto_start_task_switching::
   0026 BE 00 00             76    lds   _presto_asm_new_sp
                             77    ; restore the registers
   0029 32                   78    pula
   002A 8A 10                79    oraa  #CCR_INTERRUPT      ; do not enable interrupts in the CC register... yet
   002C 06                   80    tap
   002D 33                   81    pulb
   002E 32                   82    pula
   002F 38                   83    pulx
   0030 18 38                84    puly
                             85    ; NOW we can re-enable interrupts, because we are done with the stack
   0032 0E                   86    cli
                             87    ; LED off
                             88 ;  ldaa  ISR_LED_PORT
                             89 ;  oraa  ISR_LED_MASK
                             90 ;  staa  ISR_LED_PORT
                             91    ; "run" new task
   0033 39                   92    rts
                             93 
                             94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             95 
   0034                      96 _presto_setup_new_task::
                             97 ; uses global presto_asm_new_sp
                             98 
                             99    ; store our own SP so we can work on the new task
   0034 BF 00 00            100    sts _presto_asm_save_sp
                            101    ; load empty SP from task so we can initialize it
   0037 BE 00 00            102    lds _presto_asm_new_sp
                            103    ; make presto_kill_self as the "return pc" of a new task,
                            104    ; so if it ever returns, it will reclaim the TCB, etc
   003A CC 00 00            105    ldd   #_presto_kill_self
   003D 37                  106    pshb
   003E 36                  107    psha
                            108    ; push the actual function call on the stack
   003F FC 00 00            109    ldd   _presto_asm_new_fn
   0042 37                  110    pshb
   0043 36                  111    psha
                            112    ; push any old stinkin' registers onto the stack
ASxxxx Assembler V02.01 MSOE  (Motorola 6811), page 3.



                            113    ; they'll be pulled off when we start running
                            114    ; we push in interrupt-stack order
   0044 18 3C               115    pshy
   0046 3C                  116    pshx
   0047 36                  117    psha
   0048 37                  118    pshb
   0049 07                  119    tpa
   004A B4 FF EF            120    anda  ~#CCR_INTERRUPT     ; enable interrupts in pushed CC
   004D 36                  121    psha
                            122    ; save task SP in TCB
   004E BF 00 00            123    sts   _presto_asm_new_sp
                            124    ; re-load our own SP so we can return
   0051 BE 00 00            125    lds   _presto_asm_save_sp
   0054 39                  126    rts
                            127 
                            128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            129 
                            130 
