2003.11.31

There is a chicken-and-egg problem with mailboxes.  A high priority
task might try to send a mail message to a low priority task before
the LPT's mailbox has been initialized.  I got around this before
by doing a delicate dance at startup, passing control to each task
in turn.  I am trying an experiment now to implement some sort of
"wait until receiver mailbox exists" function.  It appears to work
for a task's default mailbox, but not for supplementary ones.  I
need to look at this in more detail.

One side effect of this experiment is that I now reserve on trigger
bit as a "kernel use only" trigger.  This makes a few of the
presto_xxxxx_wait() function calls a little cleaner, since they
no longer require a trigger parameter.  But it means the user is
a little bit restricted in his choice of which trigger bits to use
for his own purposes.

---

2003.08.16

Presto now runs on M68HC11 or AVR8515.

Triggers and timers are both supported on AVR.  All registers are
saved during a task swap (during normal interrupts, GCC-AVR only
saves registers that are used).

All CPU-dependent stuff is in "cpu" directory.  Bootstrap stuff,
interrupt vectors, error numbers, CPU (interrupt) locking, etc are
all done in separate files in CPU directory.  Hardware timers have
their own C file.  Error reporting has its own file.  All task
swapping magic is handled in one header file, kernel_magic.h.

Four major subsections (memory, semaphores, timers, mail) are now
selectively compiled using FEATURE switches in configure.h.

Still need to look at error numbers and AVR error routines.

---

2003.07.21

Subsections are documented.

API is clean.

Kernel supports either 8- or 16-bit trigger fields.

---

2003.06.01

Build script now recursively looks at includes to determine affected
files.  Also has nicer output.

Bugs ironed out of serial (TX) system.

Saved a copy of inversion.c, which might make a good demo if someone
wants to see it.

---

2003.05.29

Dynamic memory allocation works.  Very configurable and fast.

Serial service added, not part of the kernel.  Has bugs.  Skips some
characters if you send a lot of data at once.  ???

Changes made to memory.x.  I think the area of initial values for
initialized data might have been mis-placed.

Special interrupt vectors are treated like ROM (initialized, frozen).
Normal interrupt vectors are treated like RAM (static, zeroes, then
initialized manually in boot.c before switching modes).

Lots of work done to the build script.  Now gives a summary of memory
usage.  Verified what each section means (BSS is static data initialized
to zero, etc).  Also links in libgcc, which has functions like memcpy
and multiply, divide, etc.

Semaphores need work to support more than one resource (and inheritance).

---

2003.05.13

Semaphores work, with and without priority inheritance.  I need to
add support for more that one resource (semaphores which are initialized
to something greater than 1).  I need to think through the cases where
priorities are changed when a HI task waits on two tasks that have a
resource.  What about having two ready tasks with the same priority?
A few questions here.

I added a few extra functions, like presto_trigger_send, which lets
you set trigger flags in another task.

Did an overkill job of splitting the kernel.  Each module has up to
three H files (types, functions, data).  And that does not count the
global PRESTO.H, which defines all of the public interfaces and types.

I'm working on making each facility (mail, semaphores, timers) have
non-blocking functions (like presto_timer_start) which will be followed
by a presto_wait call, and blocking functions (like presto_timer_wait).
I'm thinking about letting the ***_wait functions also clear the
flags when they are done, since this would clean up the application
code a lot.  Time will tell.

---

2003.05.13

Split kernel.c into several files (kernel, mail, timers, etc).  Moved
source files around into kernel-specific and chip-specific diretories.
Entire public interface is specified in PRESTO.H.  Other H files are
internal to the kernel (mostly kernel.h, some other H files are blank).

Things to look at:
 - KERNEL_BLAH_T vs PRESTO_BLAH_T
 - where does processor-specific systimer stuff go?


---

2003.05.12

Totally redesigned.  Some interfaces are still a bit rough, but the
overall design works.

We no longer rely on the message / post office metaphor.  Instead, we
have a set of flags that can be set for a variety of reasons (currently
by an incoming mail message or an expired timer -- in the future, by
an unlocked semaphore or directly by another task).  When a task wants
to wait, it waits for one or more flags to be set.  When the flags are
set, that task becomes ready.

The new metaphor is based on Qualcomm's rex OS.  I think it is more
flexible, because you can wait for more than one thing at a time.  For
example, you might want to wait on a semaphore, but set a timeout timer
as well.  When you become ready, you can check whether it was the timer
or the semaphore that made you ready (or even an incoming mail message).
That provides a nice way to handle operations that need timeouts.

The new timer interrupt should be a lot simpler (faster).  However, it
still has to do a lot of time compares.  Maybe it's the same.

Still a lot of rough edges.  Need more work soon.  But it seems to run
OK for a while.

---

2002.10.30

Previous problem with task switching seems to be gone.  In the context
switch ISR, if we were switching from one task to the same task, this
caused a problem with the stack pointers.

Raw messages (without timers) are damn fast.  :-)

Would like to clean up (reduce,rename) global variables.

Starting a repeating timer with initial time of zero does not work.

---

2002.10.22

Bug in locks.c - inline functions were not inline.  So premain() was
taking too long to initialize the three time-sensitive registers.  Last
register did not make it before 64 clocks.  Lock functions now macros.

Sending a message directly to a task (with no delay) used to go to the
post office, then wait for a clock tick, then get delivered.  Now, the
messages are sent directly to the task's mail queue.  It's fast, but I
am seeing some problems with the SWI task switch after delivering the
mail.

In the process of sending messages directly to a task, some functions
were tidied up nicely.  Common routines are now functions.

---

2002.10.19

Added recurring timers.

Enhanced clock to count up to seven years!

Trimmed down (duplicate code in) timer interrupt.  Same stuff is in
context switch (SWI ISR).  Just call SWI from within timer ISR.  It's
OK, SWI is a non-maskable interrupt.

Getting some sort of skewing.  I would like to know more about it.  Set
all tasks to switch lights at 200ms intervals.  At first, all lights
switch at the same time.  After a while, light #0 leads the rest.  Looks
like a wagging tail.

Would like to add semaphores.

Maybe I should add the drivers and command-line interpreter that I had
before.  ???  Any need to?

---

2002.10.18

Using crt11.s from imagecraft.  Set up linker to properly load initial
values of idata into ROM (variables themselves in RAM).

Now generating debug output in object files.  Linking into an elf binary.
Then generating a detailed listing file.  Finally converting to s-record.

Stole locks.c functions from GNU.

Timing looks right.

---

2002.10.12

IT'S ALIVE!

The system seems to work.  That is, it does basic multi-tasking without
locking up.

It is now based on the GCC compiler and linker.  The memory.x file works
(quite well).  The only thing missing is a decent CRT0 file.  The one I
have does very little... in fact, it does not initialize "initialized
data".  So if you turn the board off, you'll need to reload the program
in order for the idata to be re-initialized.

The main problems that were solved this week: (1) I push three more
values onto the stack... those are the three pseudo-registers that GCC
invents and stores in the zero page.  (2) I re-did the initialization
in premain() so that it sets the three time-critical registers before
the 64th clock cycle.

Again, I would also like to take a look at the stuff I saw earlier in
locks.h.  I am not entirely happy with my INTR_ON/OFF macros.

Also, play with timing.  What's the deal with ECLOCK?

---

2002.09.29

New today... using GCC compiler (14MB!) from www.gnu-m68hc11.org.

Compiles OK, for the most part.  Still some small things left out.  The
assembler does not like the CCR macros to turn on and off interupts within the
control code register.

Would be nice to steal the exit() function and the stuff in locks.h.

Does not link properly.  Learn to make a good memory map in linker.x file.
Then firgure out how to position interrupt vectors in the proper place (both
special and normal ones).

