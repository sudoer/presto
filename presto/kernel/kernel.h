
#ifndef _KERNEL_H_
#define _KERNEL_H_

////////////////////////////////////////////////////////////////////////////////
//   D E P E N D E N C I E S
////////////////////////////////////////////////////////////////////////////////

#include "types.h"
#include "kernel/clock.h"

////////////////////////////////////////////////////////////////////////////////
//   S I M P L E   D A T A   T Y P E S
////////////////////////////////////////////////////////////////////////////////

typedef unsigned char  KERNEL_TASKID_T;
typedef unsigned char  KERNEL_PRIORITY_T;
typedef unsigned char  KERNEL_TRIGGER_T;
typedef unsigned short KERNEL_INTERVAL_T;

////////////////////////////////////////////////////////////////////////////////
//   C O M P L E X   D A T A   T Y P E S
////////////////////////////////////////////////////////////////////////////////

typedef struct KERNEL_TCB_S {
   KERNEL_TASKID_T task_id;
   BYTE * stack_ptr;
   BYTE * stack_top;
   BYTE * stack_bottom;
   KERNEL_PRIORITY_T natural_priority;
   KERNEL_PRIORITY_T current_priority;
   KERNEL_TRIGGER_T wait_mask;
   KERNEL_TRIGGER_T triggers;
   struct KERNEL_TCB_S * next;
} KERNEL_TCB_T;

////////////////////////////////////////////////////////////////////////////////
//   K E R N E L - O N L Y   D A T A
////////////////////////////////////////////////////////////////////////////////

extern KERNEL_TCB_T * kernel_current_tcb_p;

////////////////////////////////////////////////////////////////////////////////
//   K E R N E L - O N L Y   F U N C T I O N S
////////////////////////////////////////////////////////////////////////////////

extern void kernel_trigger_set(KERNEL_TCB_T * tcb_p, KERNEL_TRIGGER_T trigger);
extern void kernel_priority_override(KERNEL_TCB_T * tcb_p, KERNEL_PRIORITY_T new_priority);
extern void kernel_priority_restore(KERNEL_TCB_T * tcb_p);

////////////////////////////////////////////////////////////////////////////////

#endif

